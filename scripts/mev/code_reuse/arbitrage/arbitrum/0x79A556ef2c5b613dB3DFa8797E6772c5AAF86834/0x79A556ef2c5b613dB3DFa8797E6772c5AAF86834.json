{
    "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// ((/*,                                                                    ,*((/,.\r\n// &&@@&&%#/*.                                                        .*(#&&@@@@%. \r\n// &&@@@@@@@&%(.                                                    ,#%&@@@@@@@@%. \r\n// &&@@@@@@@@@&&(,                                                ,#&@@@@@@@@@@@%. \r\n// &&@@@@@@@@@@@&&/.                                            .(&&@@@@@@@@@@@@%. \r\n// %&@@@@@@@@@@@@@&(,                                          *#&@@@@@@@@@@@@@@%. \r\n// #&@@@@@@@@@@@@@@&#*                                       .*#@@@@@@@@@@@@@@@&#. \r\n// #&@@@@@@@@@@@@@@@@#.                                      ,%&@@@@@@@@@@@@@@@&#. \r\n// #&@@@@@@@@@@@@@@@@%(,                                    ,(&@@@@@@@@@@@@@@@@&#. \r\n// #&@@@@@@@@@@@@@@@@&&/                                   .(%&@@@@@@@@@@@@@@@@&#. \r\n// #%@@@@@@@@@@@@@@@@@@(.               ,(/,.              .#&@@@@@@@@@@@@@@@@@&#. \r\n// (%@@@@@@@@@@@@@@@@@@#*.            ./%&&&/.            .*%@@@@@@@@@@@@@@@@@@%(. \r\n// (%@@@@@@@@@@@@@@@@@@#*.           *#&@@@@&%*.          .*%@@@@@@@@@@@@@@@@@@%(. \r\n// (%@@@@@@@@@@@@@@@@@@#/.         ./#@@@@@@@@%(.         ./%@@@@@@@@@@@@@@@@@@%(. \r\n// (%@@@@@@@@@@@@@@@@@@#/.        ./&@@@@@@@@@@&(*        ,/%@@@@@@@@@@@@@@@@@@%(. \r\n// (%@@@@@@@@@@@@@@@@@@%/.       ,#&@@@@@@@@@@@@&#,.      ,/%@@@@@@@@@@@@@@@@@@%(. \r\n// /%@@@@@@@@@@@@@@@@@@#/.      *(&@@@@@@@@@@@@@@&&*      ./%@@@@@@@@@@@@@@@@@&%(. \r\n// /%@@@@@@@@@@@@@@@@@@#/.     .(&@@@@@@@@@@@@@@@@@#*.    ,/%@@@@@@@@@@@@@@@@@&#/. \r\n// ,#@@@@@@@@@@@@@@@@@@#/.    ./%@@@@@@@@@@@@@@@@@@&#,    ,/%@@@@@@@@@@@@@@@@@&(,  \r\n//  /%&@@@@@@@@@@@@@@@@#/.    *#&@@@@@@@@@@@@@@@@@@@&*    ,/%@@@@@@@@@@@@@@@@&%*   \r\n//  .*#&@@@@@@@@@@@@@@@#/.    /&&@@@@@@@@@@@@@@@@@@@&/.   ,/%@@@@@@@@@@@@@@@@#*.   \r\n//    ,(&@@@@@@@@@@@@@@#/.    /@@@@@@@@@@@@@@@@@@@@@&(,   ,/%@@@@@@@@@@@@@@%(,     \r\n//     .*(&&@@@@@@@@@@@#/.    /&&@@@@@@@@@@@@@@@@@@@&/,   ,/%@@@@@@@@@@@&%/,       \r\n//        ./%&@@@@@@@@@#/.    *#&@@@@@@@@@@@@@@@@@@@%*    ,/%@@@@@@@@@&%*          \r\n//           ,/#%&&@@@@#/.     ,#&@@@@@@@@@@@@@@@@@#/.    ,/%@@@@&&%(/,            \r\n//               ./#&@@%/.      ,/&@@@@@@@@@@@@@@%(,      ,/%@@%#*.                \r\n//                   .,,,         ,/%&@@@@@@@@&%(*        .,,,.                    \r\n//                                   ,/%&@@@%(*.                                   \r\n//  .,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**((/*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n//                                                                                                                                                                                                                                                                                                            \r\n//\r\n\r\n// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/TransferHelper.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20NoReturn {\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens that do not consistently return boolean\r\nlibrary TransferHelper {\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        try IERC20NoReturn(address(token)).transfer(to, value) {\r\n\r\n        } catch Error(string memory reason) {\r\n            // catch failing revert() and require()\r\n            revert(reason);\r\n        } catch  {\r\n            revert(\"TransferHelper: transfer failed\");\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        try IERC20NoReturn(address(token)).transferFrom(from, to, value) {\r\n\r\n        } catch Error(string memory reason) {\r\n            // catch failing revert() and require()\r\n            revert(reason);\r\n        } catch {\r\n            revert(\"TransferHelper: transferFrom failed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interface/IWETH.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File contracts/interface/IWardenPreTrade2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWardenPreTrade2 {\r\n    function preTradeAndFee(\r\n        IERC20      _src,\r\n        IERC20      _dest,\r\n        uint256     _srcAmount,\r\n        address     _trader,\r\n        address     _receiver,\r\n        uint256     _partnerId,\r\n        uint256     _metaData\r\n    )\r\n        external\r\n        returns (\r\n            uint256[] memory _fees,\r\n            address[] memory _collectors\r\n        );\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interface/IWardenSwap2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWardenSwap2 {\r\n    function trade(\r\n        bytes calldata  _data,\r\n        IERC20      _src,\r\n        uint256     _srcAmount,\r\n        uint256     _originalSrcAmount,\r\n        IERC20      _dest,\r\n        address     _receiver,\r\n        address     _trader,\r\n        uint256     _partnerId,\r\n        uint256     _metaData\r\n    )\r\n        external;\r\n    \r\n    function tradeSplit(\r\n        bytes calldata  _data,\r\n        uint256[] calldata _volumes,\r\n        IERC20      _src,\r\n        uint256     _totalSrcAmount,\r\n        uint256     _originalSrcAmount,\r\n        IERC20      _dest,\r\n        address     _receiver,\r\n        address     _trader,\r\n        uint256     _partnerId,\r\n        uint256     _metaData\r\n    )\r\n        external;\r\n}\r\n\r\n\r\n// File contracts/swap/WardenRouterV2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract WardenRouterV2 is Ownable {\r\n    using TransferHelper for IERC20;\r\n    \r\n    IWardenPreTrade2 public preTrade;\r\n\r\n    IWETH public immutable weth;\r\n    IERC20 private constant ETHER_ERC20 = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    \r\n    event UpdatedWardenPreTrade(\r\n        IWardenPreTrade2 indexed preTrade\r\n    );\r\n\r\n    /**\r\n    * @dev When fee is collected by WardenSwap for a trade, this event will be emitted\r\n    * @param token Collected token\r\n    * @param wallet Collector address\r\n    * @param amount Amount of fee collected\r\n    */\r\n    event ProtocolFee(\r\n        IERC20  indexed   token,\r\n        address indexed   wallet,\r\n        uint256           amount\r\n    );\r\n\r\n    /**\r\n    * @dev When fee is collected by WardenSwap's partners for a trade, this event will be emitted\r\n    * @param partnerId Partner ID\r\n    * @param token Collected token\r\n    * @param wallet Collector address\r\n    * @param amount Amount of fee collected\r\n    */\r\n    event PartnerFee(\r\n        uint256 indexed   partnerId,\r\n        IERC20  indexed   token,\r\n        address indexed   wallet,\r\n        uint256           amount\r\n    );\r\n\r\n    /**\r\n    * @dev When the new trade occurs (and success), this event will be emitted.\r\n    * @param srcAsset Source token\r\n    * @param srcAmount Amount of source token\r\n    * @param destAsset Destination token\r\n    * @param destAmount Amount of destination token\r\n    * @param trader User address\r\n    */\r\n    event Trade(\r\n        address indexed srcAsset,\r\n        uint256         srcAmount,\r\n        address indexed destAsset,\r\n        uint256         destAmount,\r\n        address indexed trader,\r\n        address         receiver,\r\n        bool            hasSplitted\r\n    );\r\n\r\n    constructor(\r\n        IWardenPreTrade2 _preTrade,\r\n        IWETH _weth\r\n    ) {\r\n        preTrade = _preTrade;\r\n        weth = _weth;\r\n        \r\n        emit UpdatedWardenPreTrade(_preTrade);\r\n    }\r\n\r\n    function updateWardenPreTrade(\r\n        IWardenPreTrade2 _preTrade\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        preTrade = _preTrade;\r\n        emit UpdatedWardenPreTrade(_preTrade);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs a trade with single volume\r\n    * @param _swap Warden Swap contract\r\n    * @param _data Warden Swap payload\r\n    * @param _deposits Source token receiver\r\n    * @param _src Source token\r\n    * @param _srcAmount Amount of source tokens\r\n    * @param _dest Destination token\r\n    * @param _minDestAmount Minimum of destination token amount\r\n    * @param _receiver Destination token receiver\r\n    * @param _partnerId Partner id for fee sharing / Referral\r\n    * @param _metaData Reserved for upcoming features\r\n    * @return _destAmount Amount of actual destination tokens\r\n    */\r\n    function swap(\r\n        IWardenSwap2    _swap,\r\n        bytes calldata  _data,\r\n        address     _deposits,\r\n        IERC20      _src,\r\n        uint256     _srcAmount,\r\n        IERC20      _dest,\r\n        uint256     _minDestAmount,\r\n        address     _receiver,\r\n        uint256     _partnerId,\r\n        uint256     _metaData\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 _destAmount)\r\n    {\r\n        if (_receiver == address(0)) {\r\n            _receiver = msg.sender;\r\n        }\r\n\r\n        // Collect fee\r\n        uint256 newSrcAmount = _preTradeAndCollectFee(\r\n            _src,\r\n            _dest,\r\n            _srcAmount,\r\n            msg.sender,\r\n            _receiver,\r\n            _partnerId,\r\n            _metaData\r\n        );\r\n\r\n        // Wrap ETH\r\n        if (ETHER_ERC20 == _src) {\r\n            require(msg.value == _srcAmount, \"WardenRouter::swap: Ether source amount mismatched\");\r\n            weth.deposit{value: newSrcAmount}();\r\n            \r\n            // Transfer user tokens to target\r\n            IERC20(address(weth)).safeTransfer(_deposits, newSrcAmount);\r\n        } else {\r\n            // Transfer user tokens to target\r\n            _src.safeTransferFrom(msg.sender, _deposits, newSrcAmount);\r\n        }\r\n\r\n        bytes memory payload = abi.encodeWithSelector(IWardenSwap2.trade.selector,\r\n            _data,\r\n            _src,\r\n            newSrcAmount,\r\n            _srcAmount,\r\n            _dest,\r\n            _receiver,\r\n            msg.sender,\r\n            _partnerId,\r\n            _metaData\r\n        );\r\n\r\n        _destAmount = _internalSwap(\r\n            _swap,\r\n            payload,\r\n            _dest,\r\n            _minDestAmount,\r\n            _receiver\r\n        );\r\n        emit Trade(address(_src), _srcAmount, address(_dest), _destAmount, msg.sender, _receiver, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs a trade by splitting volumes\r\n    * @param _swap Warden Swap contract\r\n    * @param _data Warden Swap payload\r\n    * @param _deposits Source token receivers\r\n    * @param _volumes Volume percentages\r\n    * @param _src Source token\r\n    * @param _totalSrcAmount Amount of source tokens\r\n    * @param _dest Destination token\r\n    * @param _minDestAmount Minimum of destination token amount\r\n    * @param _receiver Destination token receiver\r\n    * @param _partnerId Partner id for fee sharing / Referral\r\n    * @param _metaData Reserved for upcoming features\r\n    * @return _destAmount Amount of actual destination tokens\r\n    */\r\n    function swapSplit(\r\n        IWardenSwap2    _swap,\r\n        bytes calldata  _data,\r\n        address[] memory _deposits,\r\n        uint256[] memory _volumes,\r\n        IERC20      _src,\r\n        uint256     _totalSrcAmount,\r\n        IERC20      _dest,\r\n        uint256     _minDestAmount,\r\n        address     _receiver,\r\n        uint256     _partnerId,\r\n        uint256     _metaData\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 _destAmount)\r\n    {\r\n        if (_receiver == address(0)) {\r\n            _receiver = msg.sender;\r\n        }\r\n\r\n        // Collect fee\r\n        uint256 newTotalSrcAmount = _preTradeAndCollectFee(\r\n            _src,\r\n            _dest,\r\n            _totalSrcAmount,\r\n            msg.sender,\r\n            _receiver,\r\n            _partnerId,\r\n            _metaData\r\n        );\r\n\r\n        // Wrap ETH\r\n        if (ETHER_ERC20 == _src) {\r\n            require(msg.value == _totalSrcAmount, \"WardenRouter::swapSplit: Ether source amount mismatched\");\r\n            weth.deposit{value: newTotalSrcAmount}();\r\n        }\r\n\r\n        // Transfer user tokens to targets\r\n        _depositVolumes(\r\n            newTotalSrcAmount,\r\n            _deposits,\r\n            _volumes,\r\n            _src\r\n        );\r\n        \r\n\r\n        bytes memory payload = abi.encodeWithSelector(IWardenSwap2.tradeSplit.selector,\r\n            _data,\r\n            _volumes,\r\n            _src,\r\n            newTotalSrcAmount,\r\n            _totalSrcAmount,\r\n            _dest,\r\n            _receiver,\r\n            msg.sender,\r\n            _partnerId,\r\n            _metaData\r\n        );\r\n\r\n        _destAmount = _internalSwap(\r\n            _swap,\r\n            payload,\r\n            _dest,\r\n            _minDestAmount,\r\n            _receiver\r\n        );\r\n        emit Trade(address(_src), _totalSrcAmount, address(_dest), _destAmount, msg.sender, _receiver, true);\r\n    }\r\n\r\n    function _depositVolumes(\r\n        uint256 newTotalSrcAmount,\r\n        address[] memory _deposits,\r\n        uint256[] memory _volumes,\r\n        IERC20           _src\r\n    )\r\n        private\r\n    {\r\n        {\r\n            uint256 amountRemain = newTotalSrcAmount;\r\n            for (uint i = 0; i < _deposits.length; i++) {\r\n                uint256 amountForThisRound;\r\n                if (i == _deposits.length - 1) {\r\n                    amountForThisRound = amountRemain;\r\n                } else {\r\n                    amountForThisRound = newTotalSrcAmount * _volumes[i] / 100;\r\n                    amountRemain = amountRemain - amountForThisRound;\r\n                }\r\n            \r\n                if (ETHER_ERC20 == _src) {\r\n                    IERC20(address(weth)).safeTransfer(_deposits[i], amountForThisRound);\r\n                } else {\r\n                    _src.safeTransferFrom(msg.sender, _deposits[i], amountForThisRound);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _internalSwap(\r\n        IWardenSwap2 _swap,\r\n        bytes memory _payload,\r\n        IERC20       _dest,\r\n        uint256      _minDestAmount,\r\n        address      _receiver\r\n    )\r\n        private\r\n        returns (uint256 _destAmount)\r\n    {\r\n        // Record dest asset for later consistency check.\r\n        uint256 destAmountBefore = ETHER_ERC20 == _dest ? _receiver.balance : _dest.balanceOf(_receiver);\r\n\r\n        {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, bytes memory result) = address(_swap).call(_payload);\r\n            if (!success) {\r\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\r\n                if (result.length < 68) revert();\r\n                assembly {\r\n                    result := add(result, 0x04)\r\n                }\r\n                revert(abi.decode(result, (string)));\r\n            }\r\n        }\r\n\r\n        _destAmount = ETHER_ERC20 == _dest ? _receiver.balance - destAmountBefore : _dest.balanceOf(_receiver) - destAmountBefore;\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(_destAmount >= _minDestAmount, \"WardenRouter::_internalSwap: destination amount is too low.\");\r\n    }\r\n\r\n    function _preTradeAndCollectFee(\r\n        IERC20      _src,\r\n        IERC20      _dest,\r\n        uint256     _srcAmount,\r\n        address     _trader,\r\n        address     _receiver,\r\n        uint256     _partnerId,\r\n        uint256     _metaData\r\n    )\r\n        private\r\n        returns (uint256 _newSrcAmount)\r\n    {\r\n        // Collect fee\r\n        (uint256[] memory fees, address[] memory feeWallets) = preTrade.preTradeAndFee(\r\n            _src,\r\n            _dest,\r\n            _srcAmount,\r\n            _trader,\r\n            _receiver,\r\n            _partnerId,\r\n            _metaData\r\n        );\r\n        _newSrcAmount = _srcAmount;\r\n        if (fees.length > 0) {\r\n            if (fees[0] > 0) {\r\n                _collectFee(\r\n                    _trader,\r\n                    _src,\r\n                    fees[0],\r\n                    feeWallets[0]\r\n                );\r\n                _newSrcAmount -= fees[0];\r\n            }\r\n            if (fees.length == 2 && fees[1] > 0) {\r\n                _partnerFee(\r\n                    _trader,\r\n                    _partnerId, // partner id\r\n                    _src,\r\n                    fees[1],\r\n                    feeWallets[1]\r\n                );\r\n                _newSrcAmount -= fees[1];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _collectFee(\r\n        address _trader,\r\n        IERC20  _token,\r\n        uint256 _fee,\r\n        address _feeWallet\r\n    )\r\n        private\r\n    {\r\n        if (ETHER_ERC20 == _token) {\r\n            (bool success, ) = payable(_feeWallet).call{value: _fee}(\"\"); // Send ether to fee collector\r\n            require(success, \"WardenRouter::_collectFee: Transfer fee of ether failed.\");\r\n        } else {\r\n            _token.safeTransferFrom(_trader, _feeWallet, _fee); // Send token to fee collector\r\n        }\r\n        emit ProtocolFee(_token, _feeWallet, _fee);\r\n    }\r\n\r\n    function _partnerFee(\r\n        address _trader,\r\n        uint256 _partnerId,\r\n        IERC20  _token,\r\n        uint256 _fee,\r\n        address _feeWallet\r\n    )\r\n        private\r\n    {\r\n        if (ETHER_ERC20 == _token) {\r\n            (bool success, ) = payable(_feeWallet).call{value: _fee}(\"\"); // Send back ether to partner\r\n            require(success, \"WardenRouter::_partnerFee: Transfer fee of ether failed.\");\r\n        } else {\r\n            _token.safeTransferFrom(_trader, _feeWallet, _fee);\r\n        }\r\n        emit PartnerFee(_partnerId, _token, _feeWallet, _fee);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs a trade ETH -> WETH\r\n    * @param _receiver Receiver address\r\n    * @return _destAmount Amount of actual destination tokens\r\n    */\r\n    function tradeEthToWeth(\r\n        address     _receiver\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 _destAmount)\r\n    {\r\n        if (_receiver == address(0)) {\r\n            _receiver = msg.sender;\r\n        }\r\n\r\n        weth.deposit{value: msg.value}();\r\n        IERC20(address(weth)).safeTransfer(_receiver, msg.value);\r\n        _destAmount = msg.value;\r\n        emit Trade(address(ETHER_ERC20), msg.value, address(weth), _destAmount, msg.sender, _receiver, false);\r\n    }\r\n    \r\n    /**\r\n    * @dev Performs a trade WETH -> ETH\r\n    * @param _srcAmount Amount of source tokens\r\n    * @param _receiver Receiver address\r\n    * @return _destAmount Amount of actual destination tokens\r\n    */\r\n    function tradeWethToEth(\r\n        uint256     _srcAmount,\r\n        address     _receiver\r\n    )\r\n        external\r\n        returns(uint256 _destAmount)\r\n    {\r\n        if (_receiver == address(0)) {\r\n            _receiver = msg.sender;\r\n        }\r\n\r\n        IERC20(address(weth)).safeTransferFrom(msg.sender, address(this), _srcAmount);\r\n        weth.withdraw(_srcAmount);\r\n        (bool success, ) = _receiver.call{value: _srcAmount}(\"\"); // Send back ether to receiver\r\n        require(success, \"WardenRouter::tradeWethToEth: Transfer ether back to receiver failed.\");\r\n        _destAmount = _srcAmount;\r\n        emit Trade(address(weth), _srcAmount, address(ETHER_ERC20), _destAmount, msg.sender, _receiver, false);\r\n    }\r\n\r\n    // Receive ETH in case of trade WETH -> ETH\r\n    receive() external payable {\r\n        require(msg.sender == address(weth), \"WardenRouter: Receive Ether only from WETH\");\r\n    }\r\n\r\n    // In case of an expected and unexpected event that has some token amounts remain in this contract, owner can call to collect them.\r\n    function collectRemainingToken(\r\n        IERC20  _token,\r\n        uint256 _amount\r\n    )\r\n      external\r\n      onlyOwner\r\n    {\r\n        _token.safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    // In case of an expected and unexpected event that has some ether amounts remain in this contract, owner can call to collect them.\r\n    function collectRemainingEther(\r\n        uint256 _amount\r\n    )\r\n      external\r\n      onlyOwner\r\n    {\r\n        (bool success, ) = msg.sender.call{value: _amount}(\"\"); // Send back ether to sender\r\n        require(success, \"WardenRouter::collectRemainingEther: Transfer ether back to caller failed.\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/library/byte/BytesLib.sol\r\n\r\n\r\n// MODIFIED VERSION FROM https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\nlibrary BytesLib {\r\n    function concat(\r\n        bytes memory _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            // Get a location of some free memory and store it in tempBytes as\r\n            // Solidity does for memory variables.\r\n            tempBytes := mload(0x40)\r\n\r\n            // Store the length of the first bytes array at the beginning of\r\n            // the memory for tempBytes.\r\n            let length := mload(_preBytes)\r\n            mstore(tempBytes, length)\r\n\r\n            // Maintain a memory counter for the current write location in the\r\n            // temp bytes array by adding the 32 bytes for the array length to\r\n            // the starting location.\r\n            let mc := add(tempBytes, 0x20)\r\n            // Stop copying when the memory counter reaches the length of the\r\n            // first bytes array.\r\n            let end := add(mc, length)\r\n\r\n            for {\r\n                // Initialize a copy counter to the start of the _preBytes data,\r\n                // 32 bytes into its memory.\r\n                let cc := add(_preBytes, 0x20)\r\n            } lt(mc, end) {\r\n                // Increase both counters by 32 bytes each iteration.\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                // Write the _preBytes data into the tempBytes memory 32 bytes\r\n                // at a time.\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            // Add the length of _postBytes to the current length of tempBytes\r\n            // and store it as the new length in the first 32 bytes of the\r\n            // tempBytes memory.\r\n            length := mload(_postBytes)\r\n            mstore(tempBytes, add(length, mload(tempBytes)))\r\n\r\n            // Move the memory counter back from a multiple of 0x20 to the\r\n            // actual end of the _preBytes data.\r\n            mc := end\r\n            // Stop copying when the memory counter reaches the new combined\r\n            // length of the arrays.\r\n            end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_postBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            // Update the free-memory pointer by padding our last write location\r\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\r\n            // next 32 byte block, then round down to the nearest multiple of\r\n            // 32. If the sum of the length of the two arrays is zero then add\r\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\r\n            mstore(0x40, and(\r\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\r\n              not(31) // Round down to the nearest 32 bytes.\r\n            ))\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\r\n        assembly {\r\n            // Read the first 32 bytes of _preBytes storage, which is the length\r\n            // of the array. (We don't need to use the offset into the slot\r\n            // because arrays use the entire slot.)\r\n            let fslot := sload(_preBytes.slot)\r\n            // Arrays of 31 bytes or less have an even value in their slot,\r\n            // while longer arrays have an odd value. The actual length is\r\n            // the slot divided by two for odd values, and the lowest order\r\n            // byte divided by two for even values.\r\n            // If the slot is even, bitwise and the slot with 255 and divide by\r\n            // two to get the length. If the slot is odd, bitwise and the slot\r\n            // with -1 and divide by two.\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n            let newlength := add(slength, mlength)\r\n            // slength can contain both the length and contents of the array\r\n            // if length < 32 bytes so let's prepare for that\r\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n            switch add(lt(slength, 32), lt(newlength, 32))\r\n            case 2 {\r\n                // Since the new array still fits in the slot, we just need to\r\n                // update the contents of the slot.\r\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\r\n                sstore(\r\n                    _preBytes.slot,\r\n                    // all the modifications to the slot are inside this\r\n                    // next block\r\n                    add(\r\n                        // we can just add to the slot contents because the\r\n                        // bytes we want to change are the LSBs\r\n                        fslot,\r\n                        add(\r\n                            mul(\r\n                                div(\r\n                                    // load the bytes from memory\r\n                                    mload(add(_postBytes, 0x20)),\r\n                                    // zero all bytes to the right\r\n                                    exp(0x100, sub(32, mlength))\r\n                                ),\r\n                                // and now shift left the number of bytes to\r\n                                // leave space for the length in the slot\r\n                                exp(0x100, sub(32, newlength))\r\n                            ),\r\n                            // increase length by the double of the memory\r\n                            // bytes length\r\n                            mul(mlength, 2)\r\n                        )\r\n                    )\r\n                )\r\n            }\r\n            case 1 {\r\n                // The stored value fits in the slot, but the combined value\r\n                // will exceed it.\r\n                // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n                // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n                // The contents of the _postBytes array start 32 bytes into\r\n                // the structure. Our first read should obtain the `submod`\r\n                // bytes that can fit into the unused space in the last word\r\n                // of the stored array. To get this, we read 32 bytes starting\r\n                // from `submod`, so the data we read overlaps with the array\r\n                // contents by `submod` bytes. Masking the lowest-order\r\n                // `submod` bytes allows us to add that value directly to the\r\n                // stored value.\r\n\r\n                let submod := sub(32, slength)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(\r\n                    sc,\r\n                    add(\r\n                        and(\r\n                            fslot,\r\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n                        ),\r\n                        and(mload(mc), mask)\r\n                    )\r\n                )\r\n\r\n                for {\r\n                    mc := add(mc, 0x20)\r\n                    sc := add(sc, 1)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n            default {\r\n                // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n                // Start copying to the last used word of the stored array.\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n                // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n                // Copy over the first `submod` bytes of the new data as in\r\n                // case 1 above.\r\n                let slengthmod := mod(slength, 32)\r\n                let mlengthmod := mod(mlength, 32)\r\n                let submod := sub(32, slengthmod)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\r\n\r\n                for {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n        }\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don't care about, but the last `lengthmod` bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we're done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin's length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n                //zero out the 32 bytes slice we are about to return\r\n                //we need to do it because Solidity does not garbage collect\r\n                mstore(tempBytes, 0)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\r\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\r\n        uint8 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x1), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\r\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\r\n        uint16 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x2), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n    \r\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r\n        require(_bytes.length >= _start + 3, \"toUint24_outOfBounds\");\r\n        uint24 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x3), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\r\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\r\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\r\n        uint64 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x8), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n    \r\n    function toUint80(bytes memory _bytes, uint256 _start) internal pure returns (uint80) {\r\n        require(_bytes.length >= _start + 10, \"toUint80_outOfBounds\");\r\n        uint80 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xa), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\r\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\r\n        uint96 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xc), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n    \r\n    function toUint112(bytes memory _bytes, uint256 _start) internal pure returns (uint112) {\r\n        require(_bytes.length >= _start + 14, \"toUint112_outOfBounds\");\r\n        uint112 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xe), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\r\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\r\n        uint128 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x10), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\r\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\r\n        uint256 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\r\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\r\n        bytes32 tempBytes32;\r\n\r\n        assembly {\r\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n\r\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            let length := mload(_preBytes)\r\n\r\n            // if lengths don't match the arrays are not equal\r\n            switch eq(length, mload(_postBytes))\r\n            case 1 {\r\n                // cb is a circuit breaker in the for loop since there's\r\n                //  no said feature for inline assembly loops\r\n                // cb = 1 - don't breaker\r\n                // cb = 0 - break\r\n                let cb := 1\r\n\r\n                let mc := add(_preBytes, 0x20)\r\n                let end := add(mc, length)\r\n\r\n                for {\r\n                    let cc := add(_postBytes, 0x20)\r\n                // the next line is the loop condition:\r\n                // while(uint256(mc < end) + cb == 2)\r\n                } eq(add(lt(mc, end), cb), 2) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    // if any of these checks fails then arrays are not equal\r\n                    if iszero(eq(mload(mc), mload(cc))) {\r\n                        // unsuccess:\r\n                        success := 0\r\n                        cb := 0\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n                // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function equalStorage(\r\n        bytes storage _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            // we know _preBytes_offset is 0\r\n            let fslot := sload(_preBytes.slot)\r\n            // Decode the length of the stored array like in concatStorage().\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n\r\n            // if lengths don't match the arrays are not equal\r\n            switch eq(slength, mlength)\r\n            case 1 {\r\n                // slength can contain both the length and contents of the array\r\n                // if length < 32 bytes so let's prepare for that\r\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n                if iszero(iszero(slength)) {\r\n                    switch lt(slength, 32)\r\n                    case 1 {\r\n                        // blank the last byte which is the length\r\n                        fslot := mul(div(fslot, 0x100), 0x100)\r\n\r\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\r\n                            // unsuccess:\r\n                            success := 0\r\n                        }\r\n                    }\r\n                    default {\r\n                        // cb is a circuit breaker in the for loop since there's\r\n                        //  no said feature for inline assembly loops\r\n                        // cb = 1 - don't breaker\r\n                        // cb = 0 - break\r\n                        let cb := 1\r\n\r\n                        // get the keccak hash to get the contents of the array\r\n                        mstore(0x0, _preBytes.slot)\r\n                        let sc := keccak256(0x0, 0x20)\r\n\r\n                        let mc := add(_postBytes, 0x20)\r\n                        let end := add(mc, mlength)\r\n\r\n                        // the next line is the loop condition:\r\n                        // while(uint256(mc < end) + cb == 2)\r\n                        for {} eq(add(lt(mc, end), cb), 2) {\r\n                            sc := add(sc, 1)\r\n                            mc := add(mc, 0x20)\r\n                        } {\r\n                            if iszero(eq(sload(sc), mload(mc))) {\r\n                                // unsuccess:\r\n                                success := 0\r\n                                cb := 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n                // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/arbitrum/interface/IArbAddressTable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/** @title Precompiled contract that exists in every Arbitrum chain at 0x0000000000000000000000000000000000000066.\r\n* Allows registering / retrieving addresses at uint indices, saving calldata.\r\n*/\r\ninterface IArbAddressTable {\r\n    /**\r\n    * @notice Register an address in the address table\r\n    * @param addr address to register\r\n    * @return index of the address (existing index, or newly created index if not already registered)\r\n    */\r\n    function register(address addr) external returns(uint);\r\n\r\n    /**\r\n    * @param addr address to lookup\r\n    * @return index of an address in the address table (revert if address isn't in the table)\r\n    */\r\n    function lookup(address addr) external view returns(uint);\r\n\r\n    /**\r\n    * @notice Check whether an address exists in the address table\r\n    * @param addr address to check for presence in table\r\n    * @return true if address is in table\r\n    */\r\n    function addressExists(address addr) external view returns(bool);\r\n\r\n    /**\r\n    * @return size of address table (= first unused index)\r\n     */\r\n    function size() external view returns(uint);\r\n\r\n    /**\r\n    * @param index index to lookup address\r\n    * @return address at a given index in address table (revert if index is beyond end of table)\r\n    */\r\n    function lookupIndex(uint index) external view returns(address);\r\n\r\n    /**\r\n    * @notice read a compressed address from a bytes buffer\r\n    * @param buf bytes buffer containing an address\r\n    * @param offset offset of target address\r\n    * @return resulting address and updated offset into the buffer (revert if buffer is too short)\r\n    */\r\n    function decompress(bytes calldata buf, uint offset) external pure returns(address, uint);\r\n\r\n    /**\r\n    * @notice compress an address and return the result\r\n    * @param addr address to compress\r\n    * @return compressed address bytes\r\n    */\r\n    function compress(address addr) external returns(bytes memory);\r\n}\r\n\r\n\r\n// File contracts/libraries/WardenDataDeserialize2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract WardenDataDeserialize2 {\r\n    using BytesLib for bytes;\r\n\r\n    IArbAddressTable public immutable addressTable;\r\n    bool public autoRegisterAddressMapping;\r\n\r\n    event SetAutoRegisterAddressMapping(bool _enable);\r\n    \r\n    constructor(\r\n        IArbAddressTable _addressTable,\r\n        bool _autoRegisterAddressMapping\r\n    ) {\r\n        addressTable = _addressTable;\r\n        autoRegisterAddressMapping = _autoRegisterAddressMapping;\r\n    }\r\n\r\n    function _setAutoRegisterAddressMapping(\r\n        bool _enable\r\n    )\r\n        internal\r\n    {\r\n        autoRegisterAddressMapping = _enable;\r\n        emit SetAutoRegisterAddressMapping(_enable);\r\n    }\r\n\r\n    function toBytes(bytes32 _data) private pure returns (bytes memory) {\r\n        return abi.encodePacked(_data);\r\n    }\r\n\r\n    function _lookupAddress(\r\n        bytes memory _data,\r\n        uint256 _cursor\r\n    )\r\n        internal\r\n        returns (\r\n            address _address,\r\n            uint256 _newCursor\r\n        )\r\n    {\r\n        uint8 instruction = _data.toUint8(_cursor);\r\n        _cursor += 1;\r\n        \r\n        if (instruction == 0) { // not registered\r\n            _address =  _data.toAddress(_cursor);\r\n            _cursor += 20;\r\n\r\n            if (autoRegisterAddressMapping) {\r\n                addressTable.register(_address);\r\n            }\r\n            \r\n        } else if (instruction == 1) { // registered (32-bit)\r\n            _address = addressTable.lookupIndex(_data.toUint32(_cursor));\r\n            _cursor += 4;\r\n\r\n        } else if (instruction == 2) { // registered (24-bit)\r\n            _address = addressTable.lookupIndex(_data.toUint24(_cursor));\r\n            _cursor += 3;\r\n\r\n        } else if (instruction == 3) { // skip\r\n            _address = 0x0000000000000000000000000000000000000000;\r\n            \r\n        } else {\r\n            revert(\"WardenDataDeserialize:_lookupAddress bad instruction\");\r\n        }\r\n\r\n        _newCursor = _cursor;\r\n    }\r\n\r\n    function _decodeAmount(\r\n        bytes memory _data,\r\n        uint256 _cursor\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 _amount,\r\n            uint256 _newCursor\r\n        )\r\n    {\r\n        uint8 instruction = _data.toUint8(_cursor);\r\n        _cursor += 1;\r\n\r\n        if (instruction == 0) { // 64-bit, 18 (denominated in 1e18)\r\n            _amount = _data.toUint64(_cursor);\r\n            _cursor += 8;\r\n            \r\n        } else if (instruction == 1) { // 80-bit, 1.2m (denominated in 1e18)\r\n            _amount = _data.toUint80(_cursor);\r\n            _cursor += 10;\r\n\r\n        } else if (instruction == 2) { // 96-bit, 79.2b (denominated in 1e18)\r\n            _amount = _data.toUint96(_cursor);\r\n            _cursor += 12;\r\n\r\n        } else if (instruction == 3) { // 112-bit, 5,192mm (denominated in 1e18)\r\n            _amount = _data.toUint112(_cursor);\r\n            _cursor += 14;\r\n        \r\n        } else if (instruction == 4) { // zero\r\n            _amount = 0;\r\n\r\n        } else {\r\n            revert(\"WardenDataDeserialize:_decodeAmount bad instruction\");\r\n        }\r\n\r\n        _newCursor = _cursor;\r\n    }\r\n\r\n    struct SwapData {\r\n        address swap;\r\n        address src;\r\n        address dest;\r\n        address receiver;\r\n\r\n        uint256 srcAmount;\r\n        uint256 minDestAmount;\r\n        uint256 partnerId;\r\n        uint256 metaData;\r\n    }\r\n\r\n    function decodeSwapData(\r\n        bytes memory _data,\r\n        uint256 _cursor\r\n    )\r\n        public\r\n        returns (\r\n            SwapData memory _swapData,\r\n            uint256 _newCursor\r\n        )\r\n    {\r\n        (_swapData.swap, _cursor) = _lookupAddress(_data, _cursor);\r\n        (_swapData.src, _cursor) = _lookupAddress(_data, _cursor);\r\n        (_swapData.dest, _cursor) = _lookupAddress(_data, _cursor);\r\n        (_swapData.receiver, _cursor) = _lookupAddress(_data, _cursor);\r\n\r\n        (_swapData.srcAmount, _cursor) = _decodeAmount(_data, _cursor);\r\n        (_swapData.minDestAmount, _cursor) = _decodeAmount(_data, _cursor);\r\n        (_swapData.partnerId, _cursor) = _decodeAmount(_data, _cursor);\r\n        (_swapData.metaData, _cursor) = _decodeAmount(_data, _cursor);\r\n\r\n        _newCursor = _cursor;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/swap/L2/WardenRouterV2_L2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract WardenRouterV2_L2 is WardenRouterV2, WardenDataDeserialize2 {\r\n    constructor(\r\n        IWardenPreTrade2 _preTrade,\r\n        IWETH _weth,\r\n        IArbAddressTable _addressTable,\r\n        bool _autoRegisterAddressMapping\r\n    )\r\n        WardenRouterV2(_preTrade, _weth)\r\n        WardenDataDeserialize2(_addressTable, _autoRegisterAddressMapping)\r\n    {\r\n    }\r\n\r\n    function setAutoRegisterAddressMapping(\r\n        bool _enable\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        _setAutoRegisterAddressMapping(_enable);\r\n    }\r\n\r\n    function swapCompressed(\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 _destAmount)\r\n    {\r\n        (\r\n            SwapData memory swapData,\r\n            uint256 cursor\r\n        ) = decodeSwapData(_data, 0);\r\n\r\n        return WardenRouterV2.swap(\r\n            IWardenSwap2(swapData.swap),\r\n            _data[cursor:],\r\n            swapData.swap,\r\n            IERC20(swapData.src),\r\n            swapData.srcAmount,\r\n            IERC20(swapData.dest),\r\n            swapData.minDestAmount,\r\n            swapData.receiver,\r\n            swapData.partnerId,\r\n            swapData.metaData\r\n        );\r\n    }\r\n\r\n    function swapSplitCompressed(\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 _destAmount)\r\n    {\r\n        (\r\n            SwapData memory swapData,\r\n            uint256 cursor\r\n        ) = decodeSwapData(_data, 0);\r\n\r\n        address[] memory _deposits = new address[](1);\r\n        uint256[] memory _volumes = new uint256[](0);\r\n        _deposits[0] = swapData.swap;\r\n\r\n        return WardenRouterV2.swapSplit(\r\n            IWardenSwap2(swapData.swap),\r\n            _data[cursor:],\r\n            _deposits,\r\n            _volumes,\r\n            IERC20(swapData.src),\r\n            swapData.srcAmount,\r\n            IERC20(swapData.dest),\r\n            swapData.minDestAmount,\r\n            swapData.receiver,\r\n            swapData.partnerId,\r\n            swapData.metaData\r\n        );\r\n    }\r\n}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWardenPreTrade2\",\"name\":\"_preTrade\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IArbAddressTable\",\"name\":\"_addressTable\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_autoRegisterAddressMapping\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PartnerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"SetAutoRegisterAddressMapping\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasSplitted\",\"type\":\"bool\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IWardenPreTrade2\",\"name\":\"preTrade\",\"type\":\"address\"}],\"name\":\"UpdatedWardenPreTrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressTable\",\"outputs\":[{\"internalType\":\"contract IArbAddressTable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRegisterAddressMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"}],\"name\":\"decodeSwapData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metaData\",\"type\":\"uint256\"}],\"internalType\":\"struct WardenDataDeserialize2.SwapData\",\"name\":\"_swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preTrade\",\"outputs\":[{\"internalType\":\"contract IWardenPreTrade2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setAutoRegisterAddressMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWardenSwap2\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_deposits\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partnerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metaData\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swapCompressed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWardenSwap2\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"_deposits\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_volumes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSrcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partnerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metaData\",\"type\":\"uint256\"}],\"name\":\"swapSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swapSplitCompressed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"tradeEthToWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"tradeWethToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWardenPreTrade2\",\"name\":\"_preTrade\",\"type\":\"address\"}],\"name\":\"updateWardenPreTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "WardenRouterV2_L2",
    "CompilerVersion": "v0.8.10+commit.fc410830",
    "OptimizationUsed": "1",
    "Runs": "10000",
    "ConstructorArguments": "0000000000000000000000004038def268edf63775d9b7ffe8c40a7c6e90daef00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000000",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "MIT",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://a180b913d1291e55709242f4a2075cad9cb6f99ef567338fb1d30a40b108e02a"
}