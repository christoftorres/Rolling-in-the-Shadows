{
    "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/AdapterBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n// @title Abstract Contract for protocol adapter.\\n// @notice All adapters will follow this interface.\\n*/\\nabstract contract AdapterBase {\\n    using SafeERC20 for IERC20;\\n    address internal constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public router;\\n    event GovernanceTransfer(address indexed from, address indexed to);\\n\\n    /**\\n    * @dev Throws if called by any account other than the router.\\n    */\\n    modifier onlyDispatcher {\\n        require(router == msg.sender, \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    constructor(address _router) {\\n        require(_router != address(0), \\\"ZERO_ADDRESS_FORBIDDEN\\\");\\n        router = _router;\\n    }\\n\\n    /**\\n    // @dev Allows to receive ether\\n    */\\n    receive() external payable {}\\n\\n    /**\\n    // @dev Generic function to call swap protocol\\n    // @param _fromToken input token address\\n    // @param _fromAmount input token amount\\n    // @param _toToken output token address\\n    // @param _swapCallData swap callData (intended for one specific protocol)\\n    */\\n    function callAction(address fromUser, address _fromToken, uint256 _fromAmount, address _toToken, bytes memory _swapCallData) public payable virtual returns (uint256 toAmount);\\n\\n    // onlyRouter functions\\n\\n    /**\\n    // @dev Transfers funds to chosen recipient\\n    // @param token token address\\n    // @param recipient recipient of the transfer\\n    // @param amount amount to transfer\\n    */\\n    function rescueFunds(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n    ) external onlyDispatcher {\\n        if (token != NATIVE) {\\n            IERC20(token).safeTransfer(recipient, amount);\\n        } else {\\n            payable(recipient).transfer(amount);\\n        }\\n    }\\n\\n    /**\\n    // @dev Transfer governance to another contract\\n    // @dev set a new value for router\\n    // @param _newRouter address of the new governance contract\\n    */\\n    function transferGovernance(address _newRouter) public onlyDispatcher {\\n        require(_newRouter != address(0), \\\"ZERO_ADDRESS_FORBIDDEN\\\");\\n        router = _newRouter;\\n        emit GovernanceTransfer(msg.sender, _newRouter);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/Router.sol\": {\r\n      \"content\": \"/*\\n            ,\u00ab \u207f\u03c6\u03c6\u2554\u2553,\\n         ,\u03c6\u2591\u255a\u255a    \u2558\u2592\u2592\u2592\u03c6,                                              \\n        \u03c6\u2591          \u2560\u2591\u2592\u2592\u03c6        \u2584\u2588\u2588\u2588\u2588\u2584                 \u2588\u258c          \u2588\u2588\u2580\u2580\u2580\\n       \u03c6             \u2592\u2591\u2591\u2592\u2592     \u2584\u2588\u2588    \u2588\u2588\u258c  \u2584\u2584\u2584\u2584\u2584    \u2584\u2584\u2584\u2588\u2588\u258c   \u2584\u2584\u2584   \u2590\u2588\u2588\u2584\u2584  \u2584\u2584   \u2584\u2584\\n       \u2591             \u255a\u2591\u2591\u2591\u2591     \u2588\u2588      \u2588\u2588 \u2590\u2588\u258c  \u2588\u2588 \u2590\u2588\u2588   \u2588\u258c \u2588\u2588   \u2588\u2588 \u2590\u2588\u258c    \u2590\u2588\u258c \u2590\u2588\u258c\\n       \u2591             \u2591\u2591\u2591\u2591\u2592     \u2588\u2588\u2584    \u2584\u2588\u2588 \u2590\u2588\u258c  \u2588\u2588 \u2590\u2588\u2588   \u2588\u258c \u2588\u2588\u2580\u2580\u2580\u2580\u2580 \u2590\u2588\u258c     \u2588\u2588 \u2588\u2588\\n        \u2591           \u03c6\u2591\u2591\u2591\u2591       \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2590\u2588\u258c  \u2588\u2588  \u2580\u2588\u2588\u2588\u2588\u2588\u258c  \u2588\u2588\u2588\u2588\u2588  \u2590\u2588\u258c      \u2588\u2588\u2588\\n         \u207f\u2591\u2265\u00bb,    ,\u03c6\u2591\u2591\u2591\u2229                                                  \u2584\u2584\u2588\u2588\\n           `\u207f\u2265 ,\u00ab\u03c6\u2591\u2265\u207f`                                                    \\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./AdapterBase.sol\\\";\\n\\n/**\\n// @title Ondefy Router\\n// @notice Acts as the registry for DEX aggregator adapters\\n// @author Ondefy\\n*/\\ncontract Router is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n    address internal constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address private agent;\\n\\n    address private ftatInputToken;\\n\\n    uint16 private feeRateBps;\\n\\n    event AgentshipTransferred(address oldAgent, address newAgent);\\n\\n    event NewAdapter(address adapter, uint256 index);\\n\\n    event FeeRateChange(uint16 indexed newFeeRateBps);\\n\\n    event Swap(uint256 adapterindex, address indexed fromUser, address indexed fromToken, uint256 fromAmount, address indexed toToken, uint256 toAmount, bool isFtat);\\n\\n    struct Adapter {\\n        address deployedContract;\\n        bool isActivated;\\n    }\\n\\n    /**\\n    // @dev The registry of adapters\\n    // 0 for 0x, 1 for 1inch, 2 for Paraswap... \\n    */\\n    mapping(uint256 => Adapter) public adapters;\\n\\n    /**\\n     * @dev Initializes the contract. Inherits parent constructor and sets the agent.\\n     */\\n    constructor(address _agent, uint16 _feeRateBps, address _ftatInputToken) Ownable() {\\n        transferAgentship(_agent);\\n        setFeeRate( _feeRateBps);\\n        setFtatInput(_ftatInputToken);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function getAgent() public view returns (address) {\\n        return agent;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current ftat input token.\\n     */\\n    function getFtatInputToken() public view returns (address) {\\n        return ftatInputToken;\\n    }\\n\\n    /**\\n     * @dev Returns the fixed swap operation fee expressed in bps (not for FTAT operations).\\n     */\\n    function getFeeRateBps() public view returns (uint16) {\\n        return feeRateBps;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the agent.\\n     */\\n    modifier onlyAgent {\\n        require(agent == _msgSender(), \\\"CALLER_IS_NOT_AGENT\\\");\\n        _;\\n    }\\n\\n    /**\\n    // @dev Allows contract to receive ether\\n    */\\n    receive() external payable {}\\n\\n    /**\\n    // @dev Transfer funds and data to selected adapter in order to request swap execution\\n    // @param _adapterIndex index of the adapter to call\\n    // @param _fromToken input token address\\n    // @param _fromAmount swap input amount\\n    // @param _toToken output token address\\n    // @param _swapCallData swap callData (intended for one specific protocol)\\n    // @notice swap amount in @param _swapCallData must be equal to @param _inputAmount - fee\\n    */\\n    function swap(uint256 _adapterIndex, address _fromToken, uint256 _fromAmount, address _toToken, bytes memory _swapCallData) public payable {\\n        require(adapters[_adapterIndex].deployedContract != address(0), \\\"ADAPTER_NOT_DEPLOYED\\\");\\n        require(adapters[_adapterIndex].isActivated, \\\"ADAPTER_NOT_ACTIVATED\\\");\\n        require(_fromToken != _toToken, \\\"SAME_INPUT_AND_OUTPUT_TOKENS\\\");\\n\\n        uint256 fee = computeSwapFee(_fromAmount);\\n        uint256 swapInputAmount = _fromAmount - fee;\\n        address payable adapter = payable(adapters[_adapterIndex].deployedContract);\\n        uint256 toAmount;\\n        if (_fromToken != NATIVE) {\\n            IERC20(_fromToken).safeTransferFrom(msg.sender, getAgent(), fee);\\n            IERC20(_fromToken).safeTransferFrom(msg.sender, adapter, swapInputAmount);\\n            toAmount = AdapterBase(adapter).callAction(msg.sender, _fromToken, swapInputAmount, _toToken, _swapCallData);\\n        } else {\\n            payable(getAgent()).transfer(fee);\\n            toAmount = AdapterBase(adapter).callAction{value: swapInputAmount}(msg.sender, _fromToken, swapInputAmount, _toToken, _swapCallData);\\n        }\\n        emit Swap(_adapterIndex, msg.sender, _fromToken, _fromAmount, _toToken, toAmount, false);\\n    }\\n\\n    /**\\n    // @dev Transfer funds and data to selected adapter in order to request swap execution\\n    // @param _onBehalfOf user address to swap on behalf of\\n    // @param _adapterIndex index of the adapter to call\\n    // @param _permitAmount amount to permit\\n    // @param _operationFee sum of protocol fee and estimated gas fee (expressed in ftatInputToken decimals)\\n    // @param _toToken output token address\\n    // @param _swapCallData swap callData (intended for one specific protocol)\\n    // @notice swap amount in @param _swapCallData must be equal to @param _inputAmount - fee\\n    */\\n    function ftatSwapWithPermit(\\n        address _onBehalfOf,\\n        uint256 _adapterIndex,\\n        uint256 _permitAmount,\\n        uint256 _operationFee,\\n        uint256 _swapInputAmount,\\n        address _toToken,\\n        bytes memory _swapCallData,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable onlyAgent {\\n        require(adapters[_adapterIndex].deployedContract != address(0), \\\"ADAPTER_NOT_DEPLOYED\\\");\\n        require(adapters[_adapterIndex].isActivated, \\\"ADAPTER_NOT_ACTIVATED\\\");\\n        require(_permitAmount >= _swapInputAmount + _operationFee, \\\"PERMIT_AMOUNT_TOO_LOW\\\");\\n\\n        IERC20Permit(ftatInputToken).safePermit(_onBehalfOf, address(this), _permitAmount, deadline, v, r, s);\\n\\n        IERC20(ftatInputToken).safeTransferFrom(_onBehalfOf, getAgent(), _operationFee);\\n        \\n        address payable adapter = payable(adapters[_adapterIndex].deployedContract);\\n        IERC20(ftatInputToken).safeTransferFrom(_onBehalfOf, adapter, _swapInputAmount);\\n        uint256 toAmount = AdapterBase(adapter).callAction(_onBehalfOf, ftatInputToken, _swapInputAmount, _toToken, _swapCallData);\\n\\n        emit Swap(_adapterIndex, _onBehalfOf, ftatInputToken, _swapInputAmount, _toToken, toAmount, true);\\n    }\\n\\n    /**\\n    // @dev Computes swap fee for a given amount\\n    // @param amount amount to swap\\n    */\\n    function computeSwapFee(uint256 amount) public view returns (uint) {\\n        return (5000 + (amount * feeRateBps)) / 10000;\\n    }\\n\\n    // Only owner functions\\n\\n    /**\\n    // @dev Activates selected adapters\\n    // @param index adapter index\\n    */\\n    function activateAdapter(uint256 index) public onlyOwner {\\n        require(adapters[index].deployedContract != address(0), \\\"ADAPTER_NOT_DEPLOYED\\\");\\n        require(!adapters[index].isActivated, \\\"ADAPTER_ALREADY_ACTIVATED\\\");\\n        adapters[index].isActivated = true;\\n    }\\n\\n    /**\\n    // @dev Deactivates selected adapters\\n    // @param index adapter index\\n    */\\n    function deactivateAdapter(uint256 index) public onlyOwner {\\n        require(adapters[index].deployedContract != address(0), \\\"ADAPTER_NOT_DEPLOYED\\\");\\n        require(adapters[index].isActivated, \\\"ADAPTER_ALREADY_DEACTIVATED\\\");\\n        adapters[index].isActivated = false;\\n    }\\n\\n    /**\\n    // @dev Modifies adapter at given index\\n    // @param index adapter index\\n    // @param _deployedContract address of the deployed contract\\n    // @param _isActivated true for activating right away, false otherwise\\n    // @dev an adapter must be already present at given index\\n    */\\n    function modifyAdapter(uint256 index, address _deployedContract, bool _isActivated) public onlyOwner {\\n        adapters[index].deployedContract = _deployedContract;\\n        adapters[index].isActivated = _isActivated;\\n        emit NewAdapter(_deployedContract, index);\\n    }\\n\\n    /**\\n    // @dev Adds adapter at given index\\n    // @param index adapter index\\n    // @param _deployedContract address of the deployed contract\\n    // @param _isActivated true for activating right away, false otherwise\\n    // @dev no adapter should be already present at given index\\n    */\\n    function addAdapter(uint256 index, address _deployedContract, bool _isActivated) public onlyOwner {\\n        require(adapters[index].deployedContract == address(0), \\\"EXISTING_ADAPTER_AT_GIVEN_INDEX\\\");\\n        modifyAdapter(index, _deployedContract, _isActivated);\\n    }\\n\\n    /**\\n    // @dev Sets fee rate\\n    // @param _feeRateBps fee rate in bps\\n    */\\n    function setFeeRate(uint16 _feeRateBps) public onlyOwner {\\n        require(_feeRateBps < 10000, \\\"INVALID_FEE_RATE\\\");\\n        feeRateBps = _feeRateBps;\\n        emit FeeRateChange(_feeRateBps);\\n    }\\n\\n    /**\\n    // @dev Transfers contract funds to userAddress\\n    // @param token token address, see NATIVE constant above for native asset transfer\\n    // @param recipient recipient of the transfer\\n    // @param amount amount to transfer\\n    */\\n    function rescueFunds(address token, address recipient, uint256 amount) public onlyOwner {\\n        if (token != NATIVE) {\\n            IERC20(token).safeTransfer(recipient, amount);\\n        } else {\\n            payable(recipient).transfer(amount);\\n        }\\n    }\\n\\n    /**\\n    // @dev Transfers adapter funds to userAddress\\n    // @param index adapter index\\n    // @param token token address, see NATIVE constant above for native asset transfer\\n    // @param recipient recipient of the transfer\\n    // @param amount amount to transfer\\n    */\\n    function redeemAdapterFunds(uint256 index, address token, address recipient, uint256 amount) public onlyOwner {\\n        AdapterBase(payable(adapters[index].deployedContract)).rescueFunds(token, recipient, amount);\\n    }\\n\\n    /**\\n    // @dev Transfers given adapater governance to _newGovernance\\n    // @param index adapter index\\n    // @param _newGovernance address of the new governance contract\\n    // @dev the new governance contract must implement necessary functions to manage adapter governance and actions\\n    */\\n    function transferGovernance(uint256 index, address _newGovernance) public onlyOwner {\\n        AdapterBase(payable(adapters[index].deployedContract)).transferGovernance(_newGovernance);\\n    }\\n\\n    /**\\n     * @dev Transfers agentship of the Router to _newAgent\\n     * @param _agent new agent\\n     */\\n    function transferAgentship(address _agent) public virtual onlyOwner {\\n        require(_agent != address(0), \\\"ZERO_ADDRESS_FORBIDDEN\\\");\\n        address oldAgent = agent;\\n        agent = _agent;\\n        emit OwnershipTransferred(oldAgent, _agent);\\n    }\\n\\n    /**\\n     * @dev Sets FTAT input token and associated fee\\n     * @param _ftatInputToken new FTAT input token\\n     */\\n    function setFtatInput(address _ftatInputToken) public virtual onlyOwner {\\n        require(_ftatInputToken != address(0), \\\"ZERO_ADDRESS_FORBIDDEN\\\");\\n        ftatInputToken = _ftatInputToken;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_feeRateBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ftatInputToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAgent\",\"type\":\"address\"}],\"name\":\"AgentshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newFeeRateBps\",\"type\":\"uint16\"}],\"name\":\"FeeRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"NewAdapter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adapterindex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFtat\",\"type\":\"bool\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activateAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_deployedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActivated\",\"type\":\"bool\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"computeSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deactivateAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_adapterIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_permitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ftatSwapWithPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRateBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFtatInputToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_deployedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActivated\",\"type\":\"bool\"}],\"name\":\"modifyAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAdapterFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeRateBps\",\"type\":\"uint16\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ftatInputToken\",\"type\":\"address\"}],\"name\":\"setFtatInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adapterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapCallData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"transferAgentship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "Router",
    "CompilerVersion": "v0.8.9+commit.e5eed63a",
    "OptimizationUsed": "0",
    "Runs": "200",
    "ConstructorArguments": "00000000000000000000000047e739ae6bdf1a04436d4d24fd1580bd20986dff000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": ""
}