{
    "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract Multicall {\r\n    uint private am;\r\n\r\n    struct Immutables {\r\n        address t0;\r\n        address t1;\r\n        uint24 fee;\r\n        bytes4 selector;\r\n    }\r\n\r\n    struct FlashRouteParams {\r\n        uint amIn;\r\n        uint amOut;\r\n        address flashPool;\r\n        bool direc;\r\n        bytes[] callPath;\r\n    }\r\n\r\n    function uniswapV3FlashCallback(uint256 fee0,uint256 fee1,bytes calldata data) external {\r\n        fee0 += am; fee1 += am;\r\n        multicall(abi.decode(data, (bytes[])));\r\n        if(fee0 > fee1){\r\n            address token=IV3Pool(msg.sender).token0();\r\n            IERC20(token).transfer(msg.sender,fee0);\r\n            IERC20(token).transfer(tx.origin,am-fee0);\r\n        }\r\n        else{\r\n            address token=IV3Pool(msg.sender).token1();\r\n            IERC20(token).transfer(msg.sender,fee1);\r\n            IERC20(token).transfer(tx.origin,am-fee1);\r\n        }\r\n    }\r\n\r\n    function flashCallback(uint256 fee0,uint256 fee1,bytes calldata data) external {\r\n        fee0 += am; fee1 += am;\r\n        multicall(abi.decode(data, (bytes[])));\r\n        if(fee0 > fee1){\r\n            address token=IV3Pool(msg.sender).token0();\r\n            IERC20(token).transfer(msg.sender,fee0);\r\n            IERC20(token).transfer(tx.origin,am-fee0);\r\n        }\r\n        else{\r\n            address token=IV3Pool(msg.sender).token1();\r\n            IERC20(token).transfer(msg.sender,fee1);\r\n            IERC20(token).transfer(tx.origin,am-fee1);\r\n        }\r\n    }\r\n\r\n    function algebraFlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external{\r\n        fee0 += am; fee1 += am;\r\n        multicall(abi.decode(data, (bytes[])));\r\n        if(fee0 > fee1){\r\n            address token=IV3Pool(msg.sender).token0();\r\n            IERC20(token).transfer(msg.sender,fee0);\r\n            IERC20(token).transfer(tx.origin,am-fee0);\r\n        }\r\n        else{\r\n            address token=IV3Pool(msg.sender).token1();\r\n            IERC20(token).transfer(msg.sender,fee1);\r\n            IERC20(token).transfer(tx.origin,am-fee1);\r\n        }\r\n    }\r\n\r\n    function uniswapV3SwapCallback(int256 am0,int256 am1,bytes calldata) external {\r\n        if (am0 > am1) {\r\n            IERC20(IV3Pool(msg.sender).token0()).transfer(msg.sender,uint(am0));\r\n            am = uint(-am1);\r\n        } else {\r\n            IERC20(IV3Pool(msg.sender).token1()).transfer(msg.sender,uint(am1));\r\n            am = uint(-am0);\r\n        }\r\n    }\r\n\r\n    function algebraSwapCallback(int256 am0,int256 am1,bytes calldata) external {\r\n        if (am0 > am1) {\r\n            IERC20(IV3Pool(msg.sender).token0()).transfer(msg.sender,uint(am0));\r\n            am = uint(-am1);\r\n        } else {\r\n            IERC20(IV3Pool(msg.sender).token1()).transfer(msg.sender,uint(am1));\r\n            am = uint(-am0);\r\n        }\r\n    }\r\n\r\n    function swapCallback(int256 am0, int256 am1, bytes calldata) external {\r\n        if (am0 > am1) {\r\n            IERC20(IV3Pool(msg.sender).token0()).transfer(msg.sender,uint(am0));\r\n            am = uint(-am1);\r\n        } else {\r\n            IERC20(IV3Pool(msg.sender).token1()).transfer(msg.sender,uint(am1));\r\n            am = uint(-am0);\r\n        }\r\n    }\r\n\r\n    function uniV2(address pool, bool direc) public {\r\n        IERC20(direc ? IUniV2Pool(pool).token0() : IUniV2Pool(pool).token1()).transfer(pool, am);\r\n        (uint112 reserve0, uint112 reserve1, ) = IUniV2Pool(pool).getReserves();\r\n        am = (am * 997) / 1000;\r\n        am = direc ? (am * reserve1) / (reserve0 + am) : (am * reserve0) / (reserve1 + am);\r\n        IUniV2Pool(pool).swap(direc ? 0 : am,direc ? am : 0,address(this),\"\");\r\n    }\r\n\r\n    function uniV3(address pool, bool direc) public {\r\n        IUniV3Pool(pool).swap(address(this),direc,int(am),direc ? 4295128740 : 1461446703485210103287273052203988822378723970341,\"\");\r\n    }\r\n\r\n    function kyberV3(address pool, bool direc) public {\r\n        IKyberV3Pool(pool).swap(address(this),int(am),direc,direc ? 4295128740 : 1461446703485210103287273052203988822378723970341,\"\");\r\n    }\r\n\r\n    function flashRoute(FlashRouteParams calldata _route) public returns(uint amOut){\r\n        am = _route.amIn;\r\n        IV3Pool(_route.flashPool).flash(address(this),_route.direc ? am : 0,_route.direc ? 0 : am,abi.encode(_route.callPath));\r\n        amOut=am;\r\n        delete am;\r\n    }\r\n\r\n    function multicall(bytes[] memory callPath) public {\r\n        for (uint8 i = 0; i < callPath.length; i++) {\r\n            (bool success, ) = address(this).call(callPath[i]);\r\n            require(success, \"err\");\r\n        }\r\n    }\r\n\r\n    function uniV3Immutables(address pool)public view returns (Immutables memory){\r\n        return Immutables(IUniV3Pool(pool).token0(),IUniV3Pool(pool).token1(),IUniV3Pool(pool).fee(),bytes4(keccak256(\"uniV3(address,bool)\")));\r\n    }\r\n\r\n    function kyberV3Immutables(address pool)public view returns (Immutables memory){\r\n        return Immutables(IKyberV3Pool(pool).token0(),IKyberV3Pool(pool).token1(),IKyberV3Pool(pool).swapFeeUnits() * 10,bytes4(keccak256(\"kyberV3(address,bool)\")));\r\n    }\r\n\r\n    function uniV2Immutables(address pool)public view returns(Immutables memory){\r\n        return Immutables(IUniV2Pool(pool).token0(),IUniV2Pool(pool).token1(),3000,bytes4(keccak256(\"uniV2(address,bool)\")));\r\n    }\r\n\r\n    function algebraV3Immutables(address pool)public view returns (Immutables memory){\r\n        (,,uint16 fee,,,,)=IAlgebraV3Pool(pool).globalState();\r\n        return Immutables(IAlgebraV3Pool(pool).token0(),IAlgebraV3Pool(pool).token1(),fee,bytes4(keccak256(\"uniV3(address,bool)\")));\r\n    }\r\n\r\n    function factory(address pool)public view returns (address){\r\n        return IPool(pool).factory();\r\n    }\r\n}\r\n\r\ninterface IPool {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IV3Pool is IPool {\r\n    function flash(address recipient,uint256 amount0,uint256 amount1,bytes calldata data) external;\r\n}\r\n\r\ninterface IUniV2Pool is IPool {\r\n    function swap(uint amount0Out,uint amount1Out,address to,bytes calldata data) external;\r\n    function getReserves()external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniV3Pool is IV3Pool {\r\n    function swap(address recipient,bool zeroForOne,int256 amountSpecified,uint160 sqrtPriceLimitX96,bytes calldata data) external returns (int256 amount0, int256 amount1);\r\n    function fee() external view returns (uint24);\r\n}\r\n\r\ninterface IAlgebraV3Pool is IV3Pool {\r\n    function globalState() external view returns (uint160 price, int24 tick, uint16 feeZtO, uint16 feeOtZ, uint16 timepointIndex, uint8 communityFee, bool unlocked);\r\n}\r\n\r\ninterface IKyberV3Pool is IV3Pool {\r\n    function swap(address recipient,int256 swapQty,bool isToken0,uint160 limitSqrtP,bytes calldata data) external returns (int256 amount0, int256 amount1);\r\n    function swapFeeUnits() external view returns (uint24);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient,uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"algebraFlashCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"am0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"am1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"algebraSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"algebraV3Immutables\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct Multicall.Immutables\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashPool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direc\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"callPath\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Multicall.FlashRouteParams\",\"name\":\"_route\",\"type\":\"tuple\"}],\"name\":\"flashRoute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direc\",\"type\":\"bool\"}],\"name\":\"kyberV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"kyberV3Immutables\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct Multicall.Immutables\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"callPath\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"am0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"am1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"swapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direc\",\"type\":\"bool\"}],\"name\":\"uniV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"uniV2Immutables\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct Multicall.Immutables\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direc\",\"type\":\"bool\"}],\"name\":\"uniV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"uniV3Immutables\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct Multicall.Immutables\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3FlashCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"am0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"am1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "ContractName": "Multicall",
    "CompilerVersion": "v0.8.20+commit.a1b79de6",
    "OptimizationUsed": "1",
    "Runs": "800",
    "ConstructorArguments": "",
    "EVMVersion": "istanbul",
    "Library": "",
    "LicenseType": "MIT",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://acd2d1cb7bd90af34cb46a025000974f1e010238988a23eb3ae5a6605bdd001e"
}