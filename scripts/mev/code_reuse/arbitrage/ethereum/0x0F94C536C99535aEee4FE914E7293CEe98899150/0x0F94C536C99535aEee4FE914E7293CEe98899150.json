{
    "SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/Arbitrage.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\ninterface Structs {\r\n    struct Val {\r\n        uint256 value;\r\n    }\r\n\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (externally)\r\n        Sell, // sell an amount of some token (externally)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AssetDenomination {\r\n        Wei // the amount is denominated in wei\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta // the amount is given as a delta from the current value\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nabstract contract DyDxPool is Structs {\r\n    function getAccountWei(Info memory account, uint256 marketId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (Wei memory);\r\n\r\n    function operate(Info[] memory, ActionArgs[] memory) public virtual;\r\n}\r\n\r\ncontract DyDxFlashLoan is Structs {\r\n    DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    mapping(address => uint256) public currencies;\r\n\r\n    constructor() {\r\n        currencies[WETH] = 1;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n        require(\r\n            msg.sender == address(pool),\r\n            \"FlashLoan: could be called by DyDx pool only\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function tokenToMarketId(address token) public view returns (uint256) {\r\n        uint256 marketId = currencies[token];\r\n        require(marketId != 0, \"FlashLoan: Unsupported token\");\r\n        return marketId - 1;\r\n    }\r\n\r\n    // the DyDx will call `callFunction(address sender, Info memory accountInfo, bytes memory data) public` after during `operate` call\r\n    function flashloan(\r\n        address token,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal {\r\n        IERC20(token).approve(address(pool), amount + 1);\r\n        Info[] memory infos = new Info[](1);\r\n        ActionArgs[] memory args = new ActionArgs[](3);\r\n\r\n        infos[0] = Info(address(this), 0);\r\n\r\n        AssetAmount memory wamt = AssetAmount(\r\n            false,\r\n            AssetDenomination.Wei,\r\n            AssetReference.Delta,\r\n            amount\r\n        );\r\n        ActionArgs memory withdraw;\r\n        withdraw.actionType = ActionType.Withdraw;\r\n        withdraw.accountId = 0;\r\n        withdraw.amount = wamt;\r\n        withdraw.primaryMarketId = tokenToMarketId(token);\r\n        withdraw.otherAddress = address(this);\r\n\r\n        args[0] = withdraw;\r\n\r\n        ActionArgs memory call;\r\n        call.actionType = ActionType.Call;\r\n        call.accountId = 0;\r\n        call.otherAddress = address(this);\r\n        call.data = data;\r\n\r\n        args[1] = call;\r\n\r\n        ActionArgs memory deposit;\r\n        AssetAmount memory damt = AssetAmount(\r\n            true,\r\n            AssetDenomination.Wei,\r\n            AssetReference.Delta,\r\n            amount + 1\r\n        );\r\n        deposit.actionType = ActionType.Deposit;\r\n        deposit.accountId = 0;\r\n        deposit.amount = damt;\r\n        deposit.primaryMarketId = tokenToMarketId(token);\r\n        deposit.otherAddress = address(this);\r\n\r\n        args[2] = deposit;\r\n\r\n        pool.operate(infos, args);\r\n    }\r\n}\r\n\r\ncontract Arbitrage is DyDxFlashLoan {\r\n    IUniswapV2Router02 public immutable sRouter;\r\n    IUniswapV2Router02 public immutable uRouter;\r\n\r\n    address public owner;\r\n\r\n    constructor(address _sRouter, address _uRouter) {\r\n        sRouter = IUniswapV2Router02(_sRouter); // Sushiswap\r\n        uRouter = IUniswapV2Router02(_uRouter); // Uniswap\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function executeTrade(\r\n        bool _startOnUniswap,\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _flashAmount\r\n    ) external {\r\n        uint256 balanceBefore = IERC20(_token0).balanceOf(address(this));\r\n\r\n        bytes memory data = abi.encode(\r\n            _startOnUniswap,\r\n            _token0,\r\n            _token1,\r\n            _flashAmount,\r\n            balanceBefore\r\n        );\r\n\r\n        flashloan(_token0, _flashAmount, data); // execution goes to `callFunction`\r\n    }\r\n\r\n    function callFunction(\r\n        address, /* sender */\r\n        Info calldata, /* accountInfo */\r\n        bytes calldata data\r\n    ) external onlyPool {\r\n        (\r\n            bool startOnUniswap,\r\n            address token0,\r\n            address token1,\r\n            uint256 flashAmount,\r\n            uint256 balanceBefore\r\n        ) = abi.decode(data, (bool, address, address, uint256, uint256));\r\n\r\n        uint256 balanceAfter = IERC20(token0).balanceOf(address(this));\r\n\r\n        require(\r\n            balanceAfter - balanceBefore == flashAmount,\r\n            \"contract did not get the loan\"\r\n        );\r\n\r\n        // Use the money here!\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = token0;\r\n        path[1] = token1;\r\n\r\n        if (startOnUniswap) {\r\n            _swapOnUniswap(path, flashAmount, 0);\r\n\r\n            path[0] = token1;\r\n            path[1] = token0;\r\n\r\n            _swapOnSushiswap(\r\n                path,\r\n                IERC20(token1).balanceOf(address(this)),\r\n                (flashAmount + 1)\r\n            );\r\n        } else {\r\n            _swapOnSushiswap(path, flashAmount, 0);\r\n\r\n            path[0] = token1;\r\n            path[1] = token0;\r\n\r\n            _swapOnUniswap(\r\n                path,\r\n                IERC20(token1).balanceOf(address(this)),\r\n                (flashAmount + 1)\r\n            );\r\n        }\r\n\r\n        IERC20(token0).transfer(\r\n            owner,\r\n            IERC20(token0).balanceOf(address(this)) - (flashAmount + 1)\r\n        );\r\n    }\r\n\r\n    // -- INTERNAL FUNCTIONS -- //\r\n\r\n    function _swapOnUniswap(\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        uint256 _amountOut\r\n    ) internal {\r\n        require(\r\n            IERC20(_path[0]).approve(address(uRouter), _amountIn),\r\n            \"Uniswap approval failed.\"\r\n        );\r\n\r\n        uRouter.swapExactTokensForTokens(\r\n            _amountIn,\r\n            _amountOut,\r\n            _path,\r\n            address(this),\r\n            (block.timestamp + 1200)\r\n        );\r\n    }\r\n\r\n    function _swapOnSushiswap(\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        uint256 _amountOut\r\n    ) internal {\r\n        require(\r\n            IERC20(_path[0]).approve(address(sRouter), _amountIn),\r\n            \"Sushiswap approval failed.\"\r\n        );\r\n\r\n        sRouter.swapExactTokensForTokens(\r\n            _amountIn,\r\n            _amountOut,\r\n            _path,\r\n            address(this),\r\n            (block.timestamp + 1200)\r\n        );\r\n    }\r\n}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Info\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_startOnUniswap\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flashAmount\",\"type\":\"uint256\"}],\"name\":\"executeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenToMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
    "ContractName": "Arbitrage",
    "CompilerVersion": "v0.8.9+commit.e5eed63a",
    "OptimizationUsed": "0",
    "Runs": "200",
    "ConstructorArguments": "000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "MIT",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://97cc98370b05013df88a71626ac8b511db418cce98ce1a52e6552867f66feffb"
}