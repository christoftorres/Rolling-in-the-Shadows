{
    "SourceCode": "{\"BundleExecutor.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./UniswapV2Library.sol\\\";\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\ncontract MultiCall is IUniswapV2Callee {\\n    address private immutable owner;\\n    address private immutable executor;\\n    address private constant factory = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    constructor(address _executor) public payable {\\n        owner = msg.sender;\\n        executor = _executor;\\n        if (msg.value \\u003e 0) {\\n            WETH.deposit{value: msg.value}();\\n        }\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override {\\n        address[] memory path = new address[](2);\\n        uint amountToken;\\n        uint amountETH;\\n        { // scope for token{0,1}, avoids stack too deep errors\\n        address token0 = IUniswapV2Pair(msg.sender).token0();\\n        address token1 = IUniswapV2Pair(msg.sender).token1();\\n        assert(msg.sender == UniswapV2Library.pairFor(factory, token0, token1)); // ensure that msg.sender is actually a V2 pair\\n        assert(amount0 == 0 || amount1 == 0); // this strategy is unidirectional\\n        path[0] = amount0 == 0 ? token0 : token1;\\n        path[1] = amount0 == 0 ? token1 : token0;\\n        amountToken = token0 == address(WETH) ? amount1 : amount0;\\n        amountETH = token0 == address(WETH) ? amount0 : amount1;\\n        }\\n\\n        assert(path[0] == address(WETH) || path[1] == address(WETH)); // this strategy only works with a V2 WETH pair\\n        (uint256 _wethBalanceBefore, uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) = abi.decode(data, (uint256, uint256, address[], bytes[]));\\n        for (uint256 i = 0; i \\u003c _targets.length; i++) {\\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\\n            require(_success); _response;\\n        }\\n\\n        uint amountRequired = UniswapV2Library.getAmountsIn(factory, amountToken, path)[0];\\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\\n        require(_wethBalanceAfter \\u003e _wethBalanceBefore + _ethAmountToCoinbase + amountRequired);\\n        assert(WETH.transfer(msg.sender, amountRequired)); // return WETH to V2 pair\\n    }\\n\\n    function flashUniswapWeth(address buyPair, uint _amount0Out, uint _amount1Out, uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) external onlyExecutor payable {\\n        IUniswapV2Pair _buyPair = IUniswapV2Pair(buyPair);\\n        \\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\\n        bytes memory _data = abi.encode(_wethBalanceBefore, _ethAmountToCoinbase, _targets, _payloads);\\n\\n        _buyPair.swap(\\n            _amount0Out,\\n            _amount1Out,\\n            address(this),\\n            _data\\n        );\\n\\n        if (_ethAmountToCoinbase == 0) return;\\n\\n        uint256 _ethBalance = address(this).balance;\\n        if (_ethBalance \\u003c _ethAmountToCoinbase) {\\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\\n        }\\n        block.coinbase.transfer(_ethAmountToCoinbase);\\n    }\\n\\n    function uniswapWeth(uint256 _wethAmountToFirstMarket, uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) external onlyExecutor payable {\\n        require (_targets.length == _payloads.length);\\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\\n        WETH.transfer(_targets[0], _wethAmountToFirstMarket);\\n        for (uint256 i = 0; i \\u003c _targets.length; i++) {\\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\\n            require(_success); _response;\\n        }\\n\\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\\n        require(_wethBalanceAfter \\u003e _wethBalanceBefore + _ethAmountToCoinbase);\\n        if (_ethAmountToCoinbase == 0) return;\\n\\n        uint256 _ethBalance = address(this).balance;\\n        if (_ethBalance \\u003c _ethAmountToCoinbase) {\\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\\n        }\\n        block.coinbase.transfer(_ethAmountToCoinbase);\\n    }\\n\\n    function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {\\n        require(_to != address(0));\\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\\n        require(_success);\\n        return _result;\\n    }\\n}\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) \\u003e= x, \\u0027ds-math-add-overflow\\u0027);\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) \\u003c= x, \\u0027ds-math-sub-underflow\\u0027);\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\u0027ds-math-mul-overflow\\u0027);\\n    }\\n}\\n\"},\"UniswapV2Library.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\nimport \\u0027./IUniswapV2Pair.sol\\u0027;\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\u0027UniswapV2Library: IDENTICAL_ADDRESSES\\u0027);\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\u0027UniswapV2Library: ZERO_ADDRESS\\u0027);\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex\\u0027ff\\u0027,\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex\\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\u0027 // init code hash\\n            ))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_AMOUNT\\u0027);\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\u0027);\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\u0027);\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i \\u003c path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"}}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmountToCoinbase\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"}],\"name\":\"flashUniswapWeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethAmountToFirstMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmountToCoinbase\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"}],\"name\":\"uniswapWeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "MultiCall",
    "CompilerVersion": "v0.6.12+commit.27d51765",
    "OptimizationUsed": "0",
    "Runs": "200",
    "ConstructorArguments": "000000000000000000000000ec13df69ffb525234939d661bbf4304cfa8e3ba2",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "None",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://a6526248309f8b62d3e6dc5aa662792e51748a8a06cc8dee47be33629947f3d0"
}