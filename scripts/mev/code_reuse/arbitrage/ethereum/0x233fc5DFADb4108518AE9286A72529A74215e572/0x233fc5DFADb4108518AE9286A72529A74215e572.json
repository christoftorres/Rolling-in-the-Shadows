{
    "SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n    Mainnet instances:\r\n    - Uniswap V2 Router:                         0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    - Sushiswap V1 Router:                       0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\r\n    - Shibaswap V1 Router:                       0x03f7724180AA6b939894B5Ca4314783B0b36b329\r\n    - UNI:                                       0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984  // exists on Sushi\r\n    - USDT:                                      0xdAC17F958D2ee523a2206206994597C13D831ec7\r\n    - DAI:                                       0x6B175474E89094C44Da98b954EedeAC495271d0F // Triangular 1000000000\r\n    - WETH:                                      0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6 // Simple 10000000000000\r\n    - Aave LendingPoolAddressesProvider(Mainnet):0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5\r\n*/\r\n\r\n/**\r\n    Goerli instances:\r\n    - Uniswap V2 Router:                         0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    - Sushiswap V1 Router:                       0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\r\n    - Shibaswap V1 Router:                       0x03f7724180AA6b939894B5Ca4314783B0b36b329\r\n    - UNI:                                       0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984  // exists on Sushi\r\n    - USDT:                                      0xaa34a2eE8Be136f0eeD223C9Ec8D4F2d0BC472dd\r\n    - DAI:                                       0xdc31Ee1784292379Fbb2964b3B9C4124D8F89C60 // Triangular 1000000000\r\n    - WETH:                                      0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6 // Simple 10000000000000\r\n    - Aave LendingPoolAddressesProvider(kovan):  0x5E52dEc931FFb32f609681B8438A51c675cc232d\r\n    \r\n*/\r\n\r\n/**\r\n    Kovan instances:\r\n    - Uniswap V2 Router:                         0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    - Sushiswap V1 Router:                       0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\r\n    - UNI:                                       0x075A36BA8846C6B6F53644fDd3bf17E5151789DC  // exists on Sushi\r\n    - USDT:                                      0x13512979ADE267AB5100878E2e0f485B568328a4\r\n    - BUSD:                                      0x4c6E1EFC12FDfD568186b7BAEc0A43fFfb4bCcCf \r\n    - DAI:                                       0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD // Triangular 1000000000\r\n    - WETH:                                      0xd0A1E359811322d97991E03f863a0C30C2cF029C // Simple 10000000000000\r\n    - Aave LendingPoolAddressesProvider(kovan):  0x88757f2f99175387aB4C6a4b3067c77A695b0349\r\n    \r\n*/\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/protocol/libraries/types/DataTypes.sol\r\nlibrary DataTypes {\r\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    uint40 lastUpdateTimestamp;\r\n    //tokens addresses\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint8 id;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: Reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60-63: reserved\r\n    //bit 64-79: reserve factor\r\n    uint256 data;\r\n  }\r\n\r\n  struct UserConfigurationMap {\r\n    uint256 data;\r\n  }\r\n\r\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/interfaces/ILendingPoolAddressesProvider.sol\r\n/**\r\n * @title LendingPoolAddressesProvider contract\r\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\r\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\r\n * - Owned by the Aave Governance\r\n * @author Aave\r\n **/\r\ninterface ILendingPoolAddressesProvider {\r\n  event MarketIdSet(string newMarketId);\r\n  event LendingPoolUpdated(address indexed newAddress);\r\n  event ConfigurationAdminUpdated(address indexed newAddress);\r\n  event EmergencyAdminUpdated(address indexed newAddress);\r\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n  event PriceOracleUpdated(address indexed newAddress);\r\n  event LendingRateOracleUpdated(address indexed newAddress);\r\n  event ProxyCreated(bytes32 id, address indexed newAddress);\r\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n  function getMarketId() external view returns (string memory);\r\n\r\n  function setMarketId(string calldata marketId) external;\r\n\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function setLendingPoolImpl(address pool) external;\r\n\r\n  function getLendingPoolConfigurator() external view returns (address);\r\n\r\n  function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n  function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n  function setLendingPoolCollateralManager(address manager) external;\r\n\r\n  function getPoolAdmin() external view returns (address);\r\n\r\n  function setPoolAdmin(address admin) external;\r\n\r\n  function getEmergencyAdmin() external view returns (address);\r\n\r\n  function setEmergencyAdmin(address admin) external;\r\n\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  function setPriceOracle(address priceOracle) external;\r\n\r\n  function getLendingRateOracle() external view returns (address);\r\n\r\n  function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/interfaces/ILendingPool.solpragma experimental ABIEncoderV2;\r\n\r\ninterface ILendingPool {\r\n  /**\r\n   * @dev Emitted on deposit()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the deposit\r\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n   * @param amount The amount deposited\r\n   * @param referral The referral code used\r\n   **/\r\n  event Deposit(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param reserve The address of the underlyng asset being withdrawn\r\n   * @param user The address initiating the withdrawal, owner of aTokens\r\n   * @param to Address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   **/\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n   * @param reserve The address of the underlying asset being borrowed\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n   * initiator of the transaction on flashLoan()\r\n   * @param onBehalfOf The address that will be getting the debt\r\n   * @param amount The amount borrowed out\r\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\r\n   * @param borrowRate The numeric rate at which the user has borrowed\r\n   * @param referral The referral code used\r\n   **/\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint256 borrowRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The beneficiary of the repayment, getting his debt reduced\r\n   * @param repayer The address of the user initiating the repay(), providing the funds\r\n   * @param amount The amount repaid\r\n   **/\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on swapBorrowRateMode()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user swapping his rate mode\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on rebalanceStableBorrowRate()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user for which the rebalance has been executed\r\n   **/\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on flashLoan()\r\n   * @param target The address of the flash loan receiver contract\r\n   * @param initiator The address initiating the flash loan\r\n   * @param asset The address of the asset being flash borrowed\r\n   * @param amount The amount flash borrowed\r\n   * @param premium The fee flash borrowed\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address indexed initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    uint16 referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the pause is triggered.\r\n   */\r\n  event Paused();\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted.\r\n   */\r\n  event Unpaused();\r\n\r\n  /**\r\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\r\n   * LendingPoolCollateral manager using a DELEGATECALL\r\n   * This allows to have the events in the generated ABI for LendingPool.\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\r\n   * @param liquidator The address of the liquidator\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\r\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\r\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\r\n   * gets added to the LendingPool ABI\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param liquidityRate The new liquidity rate\r\n   * @param stableBorrowRate The new stable borrow rate\r\n   * @param variableBorrowRate The new variable borrow rate\r\n   * @param liquidityIndex The new liquidity index\r\n   * @param variableBorrowIndex The new variable borrow index\r\n   **/\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to deposit\r\n   * @param amount The amount to be deposited\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to Address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   * @return The final amount withdrawn\r\n   **/\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   **/\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @return The final amount repaid\r\n   **/\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 rateMode,\r\n    address onBehalfOf\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n\r\n  /**\r\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n   *        borrowed at a stable rate and depositors are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   **/\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n   * @param asset The address of the underlying asset deposited\r\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n   **/\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\r\n   * For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts amounts being flash-borrowed\r\n   * @param modes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata modes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralETH the total collateral in ETH of the user\r\n   * @return totalDebtETH the total debt in ETH of the user\r\n   * @return availableBorrowsETH the borrowing power left of the user\r\n   * @return currentLiquidationThreshold the liquidation threshold of the user\r\n   * @return ltv the loan to value of the user\r\n   * @return healthFactor the current health factor of the user\r\n   **/\r\n  function getUserAccountData(address user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralETH,\r\n      uint256 totalDebtETH,\r\n      uint256 availableBorrowsETH,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n\r\n  function initReserve(\r\n    address reserve,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\r\n    external;\r\n\r\n  function setConfiguration(address reserve, uint256 configuration) external;\r\n\r\n  /**\r\n   * @dev Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   **/\r\n  function getConfiguration(address asset)\r\n    external\r\n    view\r\n    returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   **/\r\n  function getUserConfiguration(address user)\r\n    external\r\n    view\r\n    returns (DataTypes.UserConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the normalized income normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the normalized variable debt per unit of asset\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state of the reserve\r\n   **/\r\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromAfter,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\r\n\r\n  function setPause(bool val) external;\r\n\r\n  function paused() external view returns (bool);\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/flashloan/interfaces/IFlashLoanReceiver.sol\r\n\r\n/**\r\n * @title IFlashLoanReceiver interface\r\n * @notice Interface for the Aave fee IFlashLoanReceiver.\r\n * @author Aave\r\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n **/\r\ninterface IFlashLoanReceiver {\r\n  function executeOperation(\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata premiums,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external returns (bool);\r\n\r\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\r\n\r\n  function LENDING_POOL() external view returns (ILendingPool);\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/dependencies/openzeppelin/contracts/Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    // for accounts without code, i.e. `keccak256('')`\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      codehash := extcodehash(account)\r\n    }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}('');\r\n    require(success, 'Address: unable to send value, recipient may have reverted');\r\n  }\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/dependencies/openzeppelin/contracts/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/dependencies/openzeppelin/contracts/SafeMath.sol\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      'SafeERC20: approve from non-zero to non-zero allowance'\r\n    );\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = address(token).call(data);\r\n    require(success, 'SafeERC20: low-level call failed');\r\n\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\r\n    }\r\n  }\r\n}\r\n\r\n// File: https://github.com/aave/protocol-v2/blob/master/contracts/flashloan/base/FlashLoanReceiverBase.sol\r\n\r\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  ILendingPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\r\n  ILendingPool public immutable override LENDING_POOL;\r\n\r\n  constructor(ILendingPoolAddressesProvider provider) public {\r\n    ADDRESSES_PROVIDER = provider;\r\n    LENDING_POOL = ILendingPool(provider.getLendingPool());\r\n  }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: Arbitrage_flat.sol\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor()public {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract WBNB is ERC20 {\r\n    // string public name = \"Wrapped BNB\";\r\n    // string public symbol = \"WBNB\";\r\n    // uint8 public decimals = 18;\r\n\r\n    event Deposit(address indexed account, uint256 amount);\r\n    event Withdrawal(address indexed account, uint256 amount);\r\n\r\n    constructor() public ERC20(\"Wrapped BNB\", \"WBNB\") {}\r\n\r\n    function deposit() external payable {\r\n        _mint(msg.sender, msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        _burn(msg.sender, _amount);\r\n        payable(msg.sender).transfer(_amount);\r\n        emit Withdrawal(msg.sender, _amount);\r\n    }\r\n}\r\n\r\ncontract FlashLoanSimpleArbitrage is FlashLoanReceiverBase {\r\n    //--------------------------------------------------------------------\r\n    // VARIABLES\r\n\r\n    address public owner;\r\n    address public exchangeA;\r\n    address public exchangeB;\r\n    address public tokenA;\r\n    address public tokenB;\r\n\r\n    address public devAddr;\r\n\r\n    enum Exchange {\r\n        EXCA,\r\n        EXCB,\r\n        NONE\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    // MODIFIERS\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner can call this\");\r\n        _;\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address _addressProvider,             // 0x5E52dEc931FFb32f609681B8438A51c675cc232d\r\n        address _exchangeA,                   // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        address _exchangeB,                   // 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\r\n        address _tokenA,\r\n        address _tokenB,\r\n        address _devAddr\r\n    )\r\n        public\r\n        FlashLoanReceiverBase(ILendingPoolAddressesProvider(_addressProvider))\r\n    {\r\n        owner = msg.sender;\r\n        exchangeA = _exchangeA;\r\n        exchangeB = _exchangeB;\r\n        tokenA = _tokenA;\r\n        tokenB = _tokenB;\r\n        devAddr = _devAddr;\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    // ARBITRAGE FUNCTIONS/LOGIC\r\n    \r\n    function withdrawERC(address _tokenAddress, uint256 amount) public onlyOwner {\r\n        uint256 erc20Balance = getTokenBalance(_tokenAddress);\r\n        require(amount <= erc20Balance, \"Not enough balance\");\r\n        IERC20(_tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) public onlyOwner {\r\n        uint256 ethBalance = getETHBalance();\r\n        require(amount <= ethBalance, \"Not enough balance\");\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function simpleArbitrage(uint256 _amountIn) public payable {\r\n      \r\n        uint256 amountIn = 0;\r\n        if(tokenA == address(0)) {\r\n            amountIn = msg.value;\r\n        } else {\r\n            amountIn = _amountIn; \r\n        }  \r\n                \r\n        uint256 amountOut = 0;\r\n        uint256 amountOut_ = 0;\r\n        \r\n        Exchange result = _comparePrice(tokenA, tokenB, amountIn);    // loan amountIn\r\n        if (result == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut = _swap(\r\n                amountIn,\r\n                exchangeA,\r\n                tokenA,\r\n                tokenB\r\n            );\r\n\r\n        } else if (result == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut = _swap(\r\n                amountIn,\r\n                exchangeB,\r\n                tokenA,\r\n                tokenB\r\n            );\r\n\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        Exchange result_ = _comparePrice(tokenB, tokenA, amountOut);    // loan amountIn\r\n        if (result_ == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut, \r\n                exchangeA, \r\n                tokenB, \r\n                tokenA\r\n            );\r\n        } else if (result_ == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut,\r\n                exchangeB,\r\n                tokenB,\r\n                tokenA\r\n            ); \r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        require(amountOut_ > amountIn, \"Trade Reverted, Arbitrage not profitable\");\r\n            \r\n        if(tokenA == address(0)) {\r\n            payable(devAddr).transfer(amountOut_);\r\n        } else {\r\n            IERC20(tokenA).transfer(devAddr, amountOut_);\r\n        }\r\n    }\r\n\r\n    function simpleArbitrageFlashloan(uint256 _amountIn) internal returns(uint256){\r\n    \r\n      \r\n        address _tokenA;\r\n        if(tokenA == address(0)) {\r\n            // amountIn = msg.value;\r\n            address WETH = IUniswapV2Router02(exchangeB).WETH();\r\n            _tokenA = WETH;\r\n        } else {\r\n            _tokenA = tokenA;\r\n            // amountIn = _amountIn; \r\n        }  \r\n\r\n        uint256 amountOut = 0;\r\n        uint256 amountOut_ = 0;\r\n                \r\n        Exchange result = _comparePrice(_tokenA, tokenB, _amountIn);    // loan _amountIn\r\n        if (result == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut = _swap(\r\n                _amountIn,\r\n                exchangeA,\r\n                _tokenA,\r\n                tokenB\r\n            );\r\n        } else if (result == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut = _swap(\r\n                _amountIn,\r\n                exchangeB,\r\n                _tokenA,\r\n                tokenB\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        Exchange result_ = _comparePrice(tokenB, _tokenA, amountOut);    // loan amountIn\r\n        if (result_ == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut,\r\n                exchangeA,\r\n                tokenB,\r\n                _tokenA\r\n            );\r\n        } else if (result_ == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut,\r\n                exchangeB,\r\n                tokenB,\r\n                _tokenA\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        require(amountOut_ > _amountIn, \"Trade Reverted, Arbitrage not profitable\");\r\n            \r\n        return amountOut_;\r\n    }\r\n\r\n    function _swap(\r\n        uint256 amountIn,\r\n        address routerAddress,\r\n        address sell_token,\r\n        address buy_token\r\n    ) internal returns (uint256) {\r\n\r\n        address WETH = IUniswapV2Router02(routerAddress).WETH();\r\n        \r\n        if(sell_token == address(0)) {\r\n\r\n            sell_token = WETH;\r\n\r\n            // IERC20(sell_token).approve(routerAddress, amountIn);\r\n\r\n            uint256 amountOutMin = (_getAmountOut(\r\n                routerAddress,\r\n                sell_token,\r\n                buy_token,\r\n                amountIn\r\n            ) * 95) / 100;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sell_token;\r\n            path[1] = buy_token;\r\n\r\n            uint256 amountOut = IUniswapV2Router02(routerAddress)\r\n                .swapExactETHForTokens{value : amountIn}(\r\n                    amountOutMin,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp + 15 minutes\r\n                )[1];\r\n            \r\n            return amountOut;\r\n\r\n        } else if(buy_token == address(0)) {\r\n\r\n            buy_token = WETH;\r\n\r\n            IERC20(sell_token).approve(routerAddress, amountIn);\r\n\r\n            uint256 amountOutMin = (_getAmountOut(\r\n                routerAddress,\r\n                sell_token,\r\n                buy_token,\r\n                amountIn\r\n            ) * 95) / 100;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sell_token;\r\n            path[1] = buy_token;\r\n\r\n            uint256 amountOut = IUniswapV2Router02(routerAddress)\r\n                .swapExactTokensForETH(\r\n                    amountIn,\r\n                    amountOutMin,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp + 15 minutes\r\n                )[1];\r\n\r\n            return amountOut;\r\n\r\n        } else {\r\n            IERC20(sell_token).approve(routerAddress, amountIn);\r\n\r\n            uint256 amountOutMin = (_getAmountOut(\r\n                routerAddress,\r\n                sell_token,\r\n                buy_token,\r\n                amountIn\r\n            ) * 95) / 100;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sell_token;\r\n            path[1] = buy_token;\r\n\r\n            uint256 amountOut = IUniswapV2Router02(routerAddress)\r\n                .swapExactTokensForTokens(\r\n                    amountIn,\r\n                    amountOutMin,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp + 15 minutes\r\n                )[1];\r\n\r\n            return amountOut;\r\n        }\r\n    }\r\n\r\n    function _comparePrice(address _tokenA, address _tokenB, uint256 amount) internal view returns (Exchange) {\r\n        \r\n        address WETH = IUniswapV2Router02(exchangeA).WETH();\r\n        \r\n        if(_tokenA == address(0)) _tokenA = WETH;\r\n        else if(_tokenB == address(0)) _tokenB = WETH;\r\n\r\n        uint256 exchangeAPrice = _getAmountOut(\r\n            exchangeA,\r\n            _tokenA,\r\n            _tokenB,\r\n            amount\r\n        );\r\n        uint256 exchangeBPrice = _getAmountOut(\r\n            exchangeB,\r\n            _tokenA,\r\n            _tokenB,\r\n            amount\r\n        );\r\n\r\n        // we try to sell ETH with higher price and buy it back with low price to make profit\r\n        if (exchangeAPrice > exchangeBPrice) {\r\n            require(\r\n                _checkIfArbitrageIsProfitable(\r\n                    amount,\r\n                    exchangeAPrice,\r\n                    exchangeBPrice\r\n                ),\r\n                \"Arbitrage not profitable\"\r\n            );\r\n            return Exchange.EXCA;\r\n        } else if (exchangeAPrice < exchangeBPrice) {\r\n            require(\r\n                _checkIfArbitrageIsProfitable(\r\n                    amount,\r\n                    exchangeBPrice,\r\n                    exchangeAPrice\r\n                ),\r\n                \"Arbitrage not profitable\"\r\n            );\r\n            return Exchange.EXCB;\r\n        } else {\r\n            return Exchange.NONE;\r\n        }\r\n    }\r\n\r\n    function _checkIfArbitrageIsProfitable(\r\n        uint256 amountIn,\r\n        uint256 higherPrice,\r\n        uint256 lowerPrice\r\n    ) internal pure returns (bool) {\r\n        // uniswap & sushiswap have 0.3% fee for every exchange\r\n        // so gain made must be greater than 2 * 0.3% * arbitrage_amount\r\n\r\n        // difference in ETH\r\n        uint256 difference = ((higherPrice - lowerPrice) * 10**18) /\r\n            higherPrice;\r\n\r\n        uint256 payed_fee = (amountIn * 3) / 1000;\r\n\r\n        if (difference > payed_fee) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _getAmountOut(\r\n        address routerAddress,\r\n        address sell_token,\r\n        address buy_token,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n\r\n        address[] memory pairs = new address[](2);\r\n        pairs[0] = sell_token;\r\n        pairs[1] = buy_token;\r\n        uint256 price = IUniswapV2Router02(routerAddress).getAmountsOut(\r\n            amount,\r\n            pairs\r\n        )[1];\r\n        return price;\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    // FLASHLOAN FUNCTIONS\r\n\r\n    /**\r\n     * @dev This function must be called only be the LENDING_POOL and takes care of repaying\r\n     * active debt positions, migrating collateral and incurring new V2 debt token debt.\r\n     *\r\n     * @param assets The array of flash loaned assets used to repay debts.\r\n     * @param amounts The array of flash loaned asset amounts used to repay debts.\r\n     * @param premiums The array of premiums incurred as additional debts.\r\n     * @param initiator The address that initiated the flash loan, unused.\r\n     * @param params The byte array containing, in this case, the arrays of aTokens and aTokenAmounts.\r\n     */\r\n    function executeOperation(\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata premiums,\r\n        address initiator,\r\n        bytes calldata params\r\n    ) external override returns (bool) {\r\n        //\r\n        // Try to do arbitrage with the flashloan amount.\r\n        //\r\n        uint256 amountOut = simpleArbitrageFlashloan(amounts[0]);\r\n        // At the end of your logic above, this contract owes\r\n        // the flashloaned amounts + premiums.\r\n        // Therefore ensure your contract has enough to repay\r\n        // these amounts.\r\n\r\n        uint256 amountOwing = 0;\r\n\r\n        // Approve the LendingPool contract allowance to *pull* the owed amount\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            amountOwing = amounts[i].add(premiums[i]);\r\n            IERC20(assets[i]).approve(address(LENDING_POOL), amountOwing);\r\n        }\r\n\r\n        if(tokenA == address(0)) {\r\n            address WETH = IUniswapV2Router02(exchangeA).WETH();\r\n            WBNB(WETH).withdraw(amountOut.sub(amountOwing));\r\n            \r\n            payable(devAddr).transfer(amountOut.sub(amountOwing));\r\n        } else {\r\n            IERC20(tokenA).transfer(devAddr, amountOut.sub(amountOwing));\r\n        }  \r\n\r\n        return true;\r\n    }\r\n\r\n    function flashloanArbitrage(uint256 _amountIn) public payable {\r\n        address receiverAddress = address(this);\r\n        \r\n        uint256 amountIn = 0;\r\n        \r\n        address _tokenA;\r\n        if(tokenA == address(0)) {\r\n            address WETH = IUniswapV2Router02(exchangeA).WETH();\r\n            _tokenA = WETH;\r\n            amountIn = msg.value; \r\n          WBNB(WETH).deposit{value: amountIn}();\r\n        } else {\r\n            _tokenA = tokenA;\r\n            amountIn = _amountIn; \r\n        }\r\n\r\n        address[] memory assets = new address[](1);\r\n        assets[0] = address(_tokenA);\r\n        // assets[1] = address(_tokenB);\r\n\r\n\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = amountIn;\r\n        // amounts[0] = getERC20Balance(wethAddress);\r\n\r\n        // 0 = no debt, 1 = stable, 2 = variable\r\n        uint256[] memory modes = new uint256[](1);\r\n        modes[0] = 0;\r\n        // modes[1] = INSERT_ASSET_TWO_MODE;\r\n\r\n        address onBehalfOf = address(this);\r\n        bytes memory params = \"\";\r\n        uint16 referralCode = 0;\r\n\r\n        LENDING_POOL.flashLoan(\r\n            receiverAddress,\r\n            assets,\r\n            amounts,\r\n            modes,\r\n            onBehalfOf,\r\n            params,\r\n            referralCode\r\n        );\r\n\r\n    }\r\n\r\n    function getTokenBalance(address _erc20Address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_erc20Address).balanceOf(address(this));\r\n    }\r\n\r\n    function getETHBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function checkProbability(address _tokenA, address _tokenB, uint256 _amountIn) public view returns(string memory){\r\n        Exchange result = _comparePrice(_tokenA, _tokenB, _amountIn);\r\n        if (result == Exchange.EXCA) {\r\n            return \"Arbitrage Chances in ExchangeA\";\r\n        }else if(result == Exchange.EXCB){\r\n            return \"Arbitrage Chances in ExchangeB\";\r\n        }else{\r\n            return \"No Availabe Arbitrage\";\r\n        }\r\n        \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable { }\r\n}\r\n\r\ncontract FlashLoanTriangularArbitrage is FlashLoanReceiverBase {\r\n    //--------------------------------------------------------------------\r\n    // VARIABLES\r\n\r\n    address public owner;\r\n\r\n    address public exchangeA;\r\n    address public exchangeB;\r\n    address public tokenA;\r\n    address public tokenB;\r\n    address public tokenC;\r\n    address public devAddr;\r\n\r\n    enum Exchange {\r\n        EXCA,\r\n        EXCB,\r\n        NONE\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    // MODIFIERS\r\n\r\n    modifier onlyOwner() {\r\n        require(devAddr == owner, \"only owner can call this\");\r\n        _;\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address _addressProvider,            // 0x5E52dEc931FFb32f609681B8438A51c675cc232d\r\n        address _exchangeA,                  // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        address _exchangeB,                  // 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\r\n        address _tokenA,\r\n        address _tokenB,\r\n        address _tokenC,\r\n        address _devAddr\r\n    )\r\n        public\r\n        FlashLoanReceiverBase(ILendingPoolAddressesProvider(_addressProvider))\r\n    {\r\n        owner = devAddr;\r\n        exchangeA = _exchangeA;\r\n        exchangeB = _exchangeB;\r\n        tokenA = _tokenA;\r\n        tokenB = _tokenB;\r\n        tokenC = _tokenC;\r\n        devAddr = _devAddr;\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    // ARBITRAGE FUNCTIONS/LOGIC\r\n\r\n    function withdrawERC(address _tokenAddress, uint256 amount) public onlyOwner {\r\n        uint256 erc20Balance = getTokenBalance(_tokenAddress);\r\n        require(amount <= erc20Balance, \"Not enough balance\");\r\n        IERC20(_tokenAddress).transfer(devAddr, amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) public onlyOwner {\r\n        uint256 ethBalance = getETHBalance();\r\n        require(amount <= ethBalance, \"Not enough balance\");\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function triangularArbitrage(uint256 _amountIn) public payable {\r\n        \r\n        // address WETH = IUniswapV2Router02(exchangeB).WETH();\r\n\r\n        uint256 amountIn = 0;\r\n        if(tokenA == address(0)) { \r\n           amountIn = msg.value;\r\n        } else { \r\n           amountIn = _amountIn; \r\n        }\r\n\r\n        uint256 amountOut = 0;\r\n        uint256 amountOut_ = 0;\r\n        uint256 _amountOut_ = 0;\r\n\r\n        Exchange result = _comparePrice(tokenA, tokenB, amountIn);    // loan amountIn\r\n        if (result == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut = _swap(\r\n                amountIn,\r\n                exchangeA,\r\n                tokenA,\r\n                tokenB\r\n            );\r\n        } else if (result == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut = _swap(\r\n                amountIn,\r\n                exchangeB,\r\n                tokenA,\r\n                tokenB\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        Exchange result_ = _comparePrice(tokenB, tokenC, amountOut);    // loan amountIn\r\n        if (result_ == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut,\r\n                exchangeA,\r\n                tokenB,\r\n                tokenC\r\n            );\r\n        } else if (result_ == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut,\r\n                exchangeB,\r\n                tokenB,\r\n                tokenC\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        Exchange _result_ = _comparePrice(tokenC, tokenA, amountOut_);    // loan amountIn\r\n        if (_result_ == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            _amountOut_ = _swap(\r\n                amountOut_,\r\n                exchangeA,\r\n                tokenC,\r\n                tokenA\r\n            );\r\n        } else if (_result_ == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            _amountOut_ = _swap(\r\n                amountOut_,\r\n                exchangeB,\r\n                tokenC,\r\n                tokenA\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        require(_amountOut_ > amountIn, \"Trade Reverted, Arbitrage not profitable\");\r\n\r\n        if(tokenA == address(0)) {\r\n            payable(devAddr).transfer(_amountOut_);\r\n        } else {\r\n            IERC20(tokenA).transfer(devAddr, _amountOut_);\r\n        } \r\n    }\r\n\r\n    function triangularArbitrageFlashloan(uint256 _amountIn) internal returns(uint256){\r\n        \r\n        address WETH = IUniswapV2Router02(exchangeB).WETH();\r\n\r\n        // uint256 amountIn = 0;\r\n        address _tokenA;\r\n        if(tokenA == address(0)) { \r\n        //    amountIn = msg.value;\r\n           _tokenA = WETH;\r\n        } else { \r\n        //    amountIn = _amountIn;\r\n            _tokenA = tokenA;\r\n        }\r\n        \r\n        uint256 amountOut = 0;\r\n        uint256 amountOut_ = 0;\r\n        uint256 _amountOut_ = 0;\r\n\r\n        Exchange result = _comparePrice(_tokenA, tokenB, _amountIn);    // loan _amountIn\r\n        if (result == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut = _swap(\r\n                _amountIn,\r\n                exchangeA,\r\n                _tokenA,\r\n                tokenB\r\n            );\r\n        } else if (result == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut = _swap(\r\n                _amountIn,\r\n                exchangeB,\r\n                _tokenA,\r\n                tokenB\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        Exchange result_ = _comparePrice(tokenB, tokenC, amountOut);    // loan amountIn\r\n        if (result_ == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut,\r\n                exchangeA,\r\n                tokenB,\r\n                tokenC\r\n            );\r\n        } else if (result_ == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            amountOut_ = _swap(\r\n                amountOut,\r\n                exchangeB,\r\n                tokenB,\r\n                tokenC\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        Exchange _result_ = _comparePrice(tokenC, _tokenA, amountOut_);    // loan amountIn\r\n        if (_result_ == Exchange.EXCA) {\r\n            // sell loanToken in uniswap for swapToken with high price and buy loanToken from sushiswap with lower price\r\n            _amountOut_ = _swap(\r\n                amountOut_,\r\n                exchangeA,\r\n                tokenC,\r\n                _tokenA\r\n            );\r\n        } else if (_result_ == Exchange.EXCB) {\r\n            // sell loanToken in sushiswap for swapToken with high price and buy loanToken from uniswap with lower price\r\n            _amountOut_ = _swap(\r\n                amountOut_,\r\n                exchangeB,\r\n                tokenC,\r\n                _tokenA\r\n            );\r\n        } else {\r\n          revert(\"No Arbitrage Found\");\r\n        }\r\n\r\n        require(_amountOut_ > _amountIn, \"Trade Reverted, Arbitrage not profitable\");\r\n\r\n        return _amountOut_;\r\n    }\r\n\r\n    function _swap(\r\n        uint256 amountIn,\r\n        address routerAddress,\r\n        address sell_token,\r\n        address buy_token\r\n    ) internal returns (uint256) {\r\n      \r\n       address WETH = IUniswapV2Router02(routerAddress).WETH();\r\n        \r\n        if(sell_token == address(0)) {\r\n\r\n            sell_token = WETH;\r\n\r\n            // IERC20(sell_token).approve(routerAddress, amountIn);\r\n\r\n            uint256 amountOutMin = (_getAmountOut(\r\n                routerAddress,\r\n                sell_token,\r\n                buy_token,\r\n                amountIn\r\n            ) * 95) / 100;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sell_token;\r\n            path[1] = buy_token;\r\n\r\n            uint256 amountOut = IUniswapV2Router02(routerAddress)\r\n                .swapExactETHForTokens{value : amountIn}(\r\n                    amountOutMin,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp + 15 minutes\r\n                )[1];\r\n\r\n            return amountOut;\r\n\r\n        } else if(buy_token == address(0)) {\r\n\r\n            buy_token = WETH;\r\n\r\n            IERC20(sell_token).approve(routerAddress, amountIn);\r\n\r\n            uint256 amountOutMin = (_getAmountOut(\r\n                routerAddress,\r\n                sell_token,\r\n                buy_token,\r\n                amountIn\r\n            ) * 95) / 100;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sell_token;\r\n            path[1] = buy_token;\r\n\r\n            uint256 amountOut = IUniswapV2Router02(routerAddress)\r\n                .swapExactTokensForETH(\r\n                    amountIn,\r\n                    amountOutMin,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp + 15 minutes\r\n                )[1];\r\n\r\n            return amountOut;\r\n\r\n        } else {\r\n            IERC20(sell_token).approve(routerAddress, amountIn);\r\n\r\n            uint256 amountOutMin = (_getAmountOut(\r\n                routerAddress,\r\n                sell_token,\r\n                buy_token,\r\n                amountIn\r\n            ) * 95) / 100;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sell_token;\r\n            path[1] = buy_token;\r\n\r\n            uint256 amountOut = IUniswapV2Router02(routerAddress)\r\n                .swapExactTokensForTokens(\r\n                    amountIn,\r\n                    amountOutMin,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp + 15 minutes\r\n                )[1];\r\n\r\n            return amountOut;\r\n        }\r\n          \r\n    }\r\n\r\n    function _comparePrice(address _tokenA, address _tokenB, uint256 amount) internal view returns (Exchange) {\r\n        \r\n        // else if(tokenC == address(0)) tokenC = WETH;\r\n        address WETH = IUniswapV2Router02(exchangeA).WETH();\r\n        \r\n        if(_tokenA == address(0)) _tokenA = WETH;\r\n        else if(_tokenB == address(0)) _tokenB = WETH;\r\n\r\n        uint256 uniswapPrice = _getAmountOut(\r\n            exchangeA,\r\n            _tokenA,\r\n            _tokenB,\r\n            amount\r\n        );\r\n        uint256 sushiswapPrice = _getAmountOut(\r\n            exchangeB,\r\n            _tokenA,\r\n            _tokenB,\r\n            amount\r\n        );\r\n\r\n        // we try to sell ETH with higher price and buy it back with low price to make profit\r\n        if (uniswapPrice > sushiswapPrice) {\r\n            require(\r\n                _checkIfArbitrageIsProfitable(\r\n                    amount,\r\n                    uniswapPrice,\r\n                    sushiswapPrice\r\n                ),\r\n                \"Arbitrage not profitable\"\r\n            );\r\n            return Exchange.EXCA;\r\n        } else if (uniswapPrice < sushiswapPrice) {\r\n            require(\r\n                _checkIfArbitrageIsProfitable(\r\n                    amount,\r\n                    sushiswapPrice,\r\n                    uniswapPrice\r\n                ),\r\n                \"Arbitrage not profitable\"\r\n            );\r\n            return Exchange.EXCB;\r\n        } else {\r\n            return Exchange.NONE;\r\n        }\r\n    }\r\n\r\n    function _checkIfArbitrageIsProfitable(\r\n        uint256 amountIn,\r\n        uint256 higherPrice,\r\n        uint256 lowerPrice\r\n    ) internal pure returns (bool) {\r\n        // uniswap & sushiswap have 0.3% fee for every exchange\r\n        // so gain made must be greater than 2 * 0.3% * arbitrage_amount\r\n\r\n        // difference in ETH\r\n        uint256 difference = ((higherPrice - lowerPrice) * 10**18) /\r\n            higherPrice;\r\n\r\n        uint256 payed_fee = (amountIn * 3) / 1000;\r\n\r\n        if (difference > payed_fee) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _getAmountOut(\r\n        address routerAddress,\r\n        address sell_token,\r\n        address buy_token,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n\r\n        address[] memory pairs = new address[](2);\r\n        pairs[0] = sell_token;\r\n        pairs[1] = buy_token;\r\n        uint256 price = IUniswapV2Router02(routerAddress).getAmountsOut(\r\n            amount,\r\n            pairs\r\n        )[1];\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * @dev This function must be called only be the LENDING_POOL and takes care of repaying\r\n     * active debt positions, migrating collateral and incurring new V2 debt token debt.\r\n     *\r\n     * @param assets The array of flash loaned assets used to repay debts.\r\n     * @param amounts The array of flash loaned asset amounts used to repay debts.\r\n     * @param premiums The array of premiums incurred as additional debts.\r\n     * @param initiator The address that initiated the flash loan, unused.\r\n     * @param params The byte array containing, in this case, the arrays of aTokens and aTokenAmounts.\r\n     */\r\n    function executeOperation(\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata premiums,\r\n        address initiator,\r\n        bytes calldata params\r\n    ) external override returns (bool) {\r\n        //\r\n        // Try to do arbitrage with the flashloan amount.\r\n        //\r\n        uint256 amountOut = triangularArbitrageFlashloan(amounts[0]);\r\n        // At the end of your logic above, this contract owes\r\n        // the flashloaned amounts + premiums.\r\n        // Therefore ensure your contract has enough to repay\r\n        // these amounts.\r\n        uint256 amountOwing = 0;\r\n        // Approve the LendingPool contract allowance to *pull* the owed amount\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            amountOwing = amounts[i].add(premiums[i]);\r\n            IERC20(assets[i]).approve(address(LENDING_POOL), amountOwing);\r\n        }\r\n\r\n        if(tokenA == address(0)) {\r\n            address WETH = IUniswapV2Router02(exchangeA).WETH();\r\n            WBNB(WETH).withdraw(amountOut.sub(amountOwing));\r\n\r\n            payable(devAddr).transfer(amountOut.sub(amountOwing));\r\n        } else {\r\n            IERC20(tokenA).transfer(devAddr, amountOut.sub(amountOwing));\r\n        }  \r\n        \r\n        return true;\r\n    }\r\n\r\n    function flashloanArbitrage(uint256 _amountIn) public payable {\r\n        address receiverAddress = address(this);\r\n\r\n        uint256 amountIn = 0;        \r\n        address _tokenA;\r\n\r\n        if(tokenA == address(0)) {\r\n            address WETH = IUniswapV2Router02(exchangeA).WETH();\r\n            _tokenA = WETH;\r\n            amountIn = msg.value; \r\n            WBNB(WETH).deposit{value: amountIn}();\r\n        } else {\r\n            _tokenA = tokenA;\r\n            amountIn = _amountIn; \r\n        }\r\n\r\n        address[] memory assets = new address[](1);\r\n        assets[0] = address(_tokenA);\r\n        // assets[1] = address(_tokenB);\r\n        // assets[2] = address(_tokenC);\r\n\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = amountIn;\r\n        // amounts[0] = getERC20Balance(wethAddress);\r\n\r\n        // 0 = no debt, 1 = stable, 2 = variable\r\n        uint256[] memory modes = new uint256[](1);\r\n        modes[0] = 0;\r\n        // modes[1] = INSERT_ASSET_TWO_MODE;\r\n\r\n        address onBehalfOf = address(this);\r\n        bytes memory params = \"\";\r\n        uint16 referralCode = 0;\r\n\r\n        LENDING_POOL.flashLoan(\r\n            receiverAddress,\r\n            assets,\r\n            amounts,\r\n            modes,\r\n            onBehalfOf,\r\n            params,\r\n            referralCode\r\n        );\r\n    }\r\n\r\n    function getTokenBalance(address _erc20Address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_erc20Address).balanceOf(address(this));\r\n    }\r\n\r\n    function getETHBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function checkProbability(address _tokenA, address _tokenB, uint256 _amountIn) public view returns(string memory){\r\n        Exchange result = _comparePrice(_tokenA, _tokenB, _amountIn);\r\n        if (result == Exchange.EXCA) {\r\n            return \"Arbitrage Chances in ExchangeA\";\r\n        }else if(result == Exchange.EXCB){\r\n            return \"Arbitrage Chances in ExchangeB\";\r\n        }else{\r\n            return \"No Availabe Arbitrage\";\r\n        }\r\n        \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable { }\r\n}\r\n\r\ncontract ArbitrageMain is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public providerAddress = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;  // Mainnet\r\n\r\n    enum Exchange {\r\n        EXCA,\r\n        EXCB,\r\n        NONE\r\n    }\r\n\r\n    event SimpleArbitrageDeployed(address user, address arbitrage);\r\n    event SimpleFlashLoanArbitrageDeployed(address user, address arbitrage);\r\n    event TriangularArbitrageDeployed(address user, address arbitrage);\r\n    event TriangularFlashLoanArbitrageDeployed(address user, address arbitrage);\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function modifyProviderAddress(address _providerAddress) external onlyOwner {\r\n        providerAddress = _providerAddress;\r\n    }\r\n\r\n    function callSimpleArbitrage(address _user, address _exchangeA, address _exchangeB, address _tokenA, address _tokenB, uint256 _amountIn) public payable {\r\n        address payable contractA = address(new FlashLoanSimpleArbitrage(providerAddress, _exchangeA, _exchangeB, _tokenA, _tokenB, _user));\r\n\r\n        uint256 amountIn;\r\n        if(_tokenA == address(0)) {\r\n          amountIn = msg.value;\r\n          FlashLoanSimpleArbitrage(contractA).simpleArbitrage{value:amountIn}(0);\r\n        } else {\r\n          amountIn = _amountIn; \r\n          IERC20(_tokenA).transferFrom(_user, address(this), amountIn);\r\n          IERC20(_tokenA).transfer(contractA, amountIn);\r\n          FlashLoanSimpleArbitrage(contractA).simpleArbitrage(amountIn);\r\n        }\r\n\r\n        // IERC20(_tokenA).approve(contractA, amountIn);\r\n        // IERC20(_tokenB).approve(contractA, amountIn);\r\n\r\n        emit SimpleArbitrageDeployed(_user, contractA);\r\n    }  \r\n\r\n    function callSimpleFlashLoan(address _user, address _exchangeA, address _exchangeB, address _tokenA, address _tokenB, uint256 _amountIn) public payable {\r\n        address payable contractA = address(new FlashLoanSimpleArbitrage(providerAddress, _exchangeA, _exchangeB, _tokenA, _tokenB, _user));\r\n\r\n        uint256 amountIn;\r\n        if(_tokenA == address(0)) {\r\n          amountIn = msg.value;\r\n          FlashLoanSimpleArbitrage(contractA).flashloanArbitrage{value:amountIn}(0);\r\n        } else {\r\n          amountIn = _amountIn; \r\n          FlashLoanSimpleArbitrage(contractA).flashloanArbitrage(amountIn);\r\n        }\r\n\r\n        emit SimpleFlashLoanArbitrageDeployed(_user, contractA);\r\n    }\r\n\r\n    function callTriangularArbitrage(address _user, address _exchangeA, address _exchangeB, address _tokenA, address _tokenB, address _tokenC, uint256 _amountIn) public payable {\r\n        address payable contractA = address(new FlashLoanTriangularArbitrage(providerAddress, _exchangeA, _exchangeB, _tokenA, _tokenB, _tokenC, _user));\r\n\r\n        uint256 amountIn;\r\n        if(_tokenA == address(0)) {\r\n          amountIn = msg.value;\r\n          FlashLoanTriangularArbitrage(contractA).triangularArbitrage{value:amountIn}(0);\r\n\r\n        } else {\r\n          amountIn = _amountIn; \r\n          IERC20(_tokenA).transferFrom(_user, address(this), amountIn);\r\n          IERC20(_tokenA).transfer(contractA, amountIn);\r\n          FlashLoanTriangularArbitrage(contractA).triangularArbitrage(amountIn);\r\n        }\r\n\r\n        emit TriangularArbitrageDeployed(_user, contractA);\r\n    }\r\n\r\n    function callTriangularFlashLoan(address _user, address _exchangeA, address _exchangeB, address _tokenA, address _tokenB, address _tokenC, uint256 _amountIn) public payable {\r\n        address payable contractA = address(new FlashLoanTriangularArbitrage(providerAddress, _exchangeA, _exchangeB, _tokenA, _tokenB, _tokenC, _user));\r\n\r\n        uint256 amountIn;\r\n        if(_tokenA == address(0)) {\r\n          amountIn = msg.value;\r\n          FlashLoanTriangularArbitrage(contractA).flashloanArbitrage{value:amountIn}(0);   \r\n\r\n        } else {\r\n          amountIn = _amountIn; \r\n          FlashLoanTriangularArbitrage(contractA).flashloanArbitrage(amountIn);\r\n        }\r\n\r\n        emit TriangularFlashLoanArbitrageDeployed(_user, contractA);\r\n    }\r\n\r\n    function getTokenBalance(address _erc20Address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_erc20Address).balanceOf(address(this));\r\n    }\r\n\r\n    function getETHBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawERC(address _tokenAddress, uint256 amount) public onlyOwner {\r\n        uint256 erc20Balance = getTokenBalance(_tokenAddress);\r\n        require(amount <= erc20Balance, \"Not enough balance\");\r\n        IERC20(_tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) public onlyOwner {\r\n        uint256 ethBalance = getETHBalance();\r\n        require(amount <= ethBalance, \"Not enough balance\");\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable { }\r\n\r\n}",
    "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arbitrage\",\"type\":\"address\"}],\"name\":\"SimpleArbitrageDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arbitrage\",\"type\":\"address\"}],\"name\":\"SimpleFlashLoanArbitrageDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arbitrage\",\"type\":\"address\"}],\"name\":\"TriangularArbitrageDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arbitrage\",\"type\":\"address\"}],\"name\":\"TriangularFlashLoanArbitrageDeployed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"callSimpleArbitrage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"callSimpleFlashLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"callTriangularArbitrage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"callTriangularFlashLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"modifyProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "ArbitrageMain",
    "CompilerVersion": "v0.6.12+commit.27d51765",
    "OptimizationUsed": "1",
    "Runs": "200",
    "ConstructorArguments": "",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "None",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://bca52e66d69dc26be8069891278b60399832316107d318ffeafc733cfebc5c05"
}