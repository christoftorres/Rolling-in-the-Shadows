{
    "SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\ncontract uniswap_flashswapV2 {\r\n\r\n    // From openzeppelin ownable.sol\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Main contract\r\n\r\n    // Fallback must be payable\r\n    fallback() external payable {}\r\n    receive() external payable  {}\r\n\r\n    // @notice This function is used when either the _tokenBorrow or _tokenBase is WETH or ETH\r\n    // @dev Since ~all tokens trade against WETH (if they trade at all), we can use a single UniswapV2 pair to\r\n    //     flash-borrow and repay with the requested tokens.\r\n    // @dev This initiates the flash borrow. See `simpleFlashSwapExecute` for the code that executes after the borrow.\r\n    // @param _pool1 is the dex that execute flash swap (cheaper token), _pool2 is the dex that sells the token to weth\r\n    // @param _borrowAmount is the amount of token borrowed from flashswap, _repayAmount is the amount repay to flashswap, _swapoutAmount is the amount swap from the other DEX\r\n    // @param _pool1BorrowToken\r\n    function simpleFlashSwap(\r\n        address _tokenBorrow,\r\n        address _tokenBase,\r\n        address _pool1,\r\n        address _pool2,\r\n        uint _borrowAmount,\r\n        uint _repayAmount,\r\n        uint _swapoutAmount\r\n    ) public onlyOwner {\r\n        address token0 = IUniswapV2Pair(_pool1).token0();\r\n        address token1 = IUniswapV2Pair(_pool1).token1();\r\n        uint amount0Out = _tokenBorrow == token0 ? _borrowAmount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _borrowAmount : 0;\r\n        bytes memory data = abi.encode(\r\n            _tokenBorrow,\r\n            _tokenBase,\r\n            _pool1,\r\n            _pool2,\r\n            _borrowAmount,\r\n            _repayAmount,\r\n            _swapoutAmount\r\n        );\r\n        IUniswapV2Pair(_pool1).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice Function is called by the Uniswap V2 pair's `swap` function\r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\r\n        // access control\r\n        require(_sender == address(this), \"only this contract may initiate\");\r\n\r\n        // decode data\r\n        (\r\n            address _tokenBorrow,\r\n            address _tokenBase,\r\n            address _pool1,\r\n            address _pool2,\r\n            uint _borrowAmount,\r\n            uint _repayAmount,\r\n            uint _swapoutAmount\r\n        ) = abi.decode(_data, (address, address, address, address, uint, uint, uint));\r\n\r\n        simpleFlashSwapExecute(_tokenBorrow, _tokenBase, _pool1, _pool2, _borrowAmount, _repayAmount, _swapoutAmount, msg.sender);   \r\n       \r\n        // NOOP to silence compiler \"unused parameter\" warning\r\n        if (false) {\r\n            _amount0;\r\n            _amount1;\r\n        }\r\n        return;\r\n    }\r\n\r\n    function simpleFlashSwapExecute(\r\n        address _tokenBorrow,\r\n        address _tokenBase,\r\n        address _pool1,\r\n        address _pool2,\r\n        uint _borrowAmount,\r\n        uint _repayAmount,\r\n        uint _swapoutAmount,\r\n        address _pairAddress\r\n    ) private {\r\n        require(_pairAddress==_pool1,\"Only LP pool can call this function\");\r\n\r\n        // swap on pool2\r\n        swapPool2(_tokenBorrow, _tokenBase, _pool2, _borrowAmount, _repayAmount, _swapoutAmount);\r\n\r\n        // payback loan\r\n        IERC20(_tokenBase).transfer(_pool1, _repayAmount);\r\n    }\r\n\r\n    // @notice This is where the user's custom logic goes\r\n    // @dev When this function executes, this contract will hold _amount of _tokenBorrow\r\n    // @dev It is important that, by the end of the execution of this function, this contract holds the necessary\r\n    //     amount of the original _tokenBase needed to pay back the flash-loan.\r\n    // @dev Paying back the flash-loan happens automatically by the calling function -- do not pay back the loan in this function\r\n    // @dev If you entered `0x0` for _tokenBase when you called `flashSwap`, then make sure this contract hols _amount ETH before this\r\n    //     finishes executing\r\n    // @dev User will override this function on the inheriting contract\r\n    function swapPool2(\r\n        address _tokenBorrow, \r\n        address _tokenBase,\r\n        address _pool2,\r\n        uint _borrowAmount, \r\n        uint _repayAmount,\r\n        uint _swapoutAmount\r\n        ) internal {\r\n        \r\n        IERC20(_tokenBorrow).transfer(_pool2, _borrowAmount); // Transfer the borrow token first then swap\r\n        \r\n        require(_swapoutAmount>_repayAmount,\"Not enough token to repay due to bad rate from pool2\");\r\n\r\n        address token0 = IUniswapV2Pair(_pool2).token0();\r\n        address token1 = IUniswapV2Pair(_pool2).token1();\r\n        uint amount0Out = _tokenBase == token0 ? _swapoutAmount : 0;\r\n        uint amount1Out = _tokenBase == token1 ? _swapoutAmount : 0;\r\n        \r\n        IUniswapV2Pair(_pool2).swap(amount0Out, amount1Out, address(this),\"\");\r\n\r\n\r\n    }\r\n\r\n    function withdraw(address _tokenContract, uint256 _amount) external onlyOwner {\r\n        IERC20 tokenContract = IERC20(_tokenContract);\r\n        \r\n        // transfer the token from address of this contract\r\n        // to address of the user (executing the withdrawToken() function)\r\n        tokenContract.transfer(msg.sender, _amount);\r\n    }\r\n\r\n}",
    "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapoutAmount\",\"type\":\"uint256\"}],\"name\":\"simpleFlashSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "uniswap_flashswapV2",
    "CompilerVersion": "v0.8.9+commit.e5eed63a",
    "OptimizationUsed": "0",
    "Runs": "200",
    "ConstructorArguments": "",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "Unlicense",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://10be19f6e273fe0721b120366b90e76573decbb1f2496d456deeb662572bf923"
}