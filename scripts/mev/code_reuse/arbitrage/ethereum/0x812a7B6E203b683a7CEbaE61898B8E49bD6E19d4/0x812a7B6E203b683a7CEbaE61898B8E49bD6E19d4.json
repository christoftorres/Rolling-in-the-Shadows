{
    "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Tri.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.22 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\n\\ncontract Uni {\\n    \\n    function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts) {}\\n    \\n    function swapTokensForExactTokens( \\n        uint amountOut, \\n        uint amountInMax, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external virtual returns (uint[] memory amounts) {}\\n    \\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual returns (uint[] memory amounts) {}\\n}\\n\\ncontract Tri {\\n  constructor() public {\\n  }\\n\\n  uint256 constant MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  address constant UNI_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Mainet & Rinkeby\\n\\n  function approve (address x) public {\\n    IERC20(x).approve(UNI_ADDRESS,MAX_INT);\\n  }\\n\\n  function trade_1 (address x, address y, uint256 dx) public returns(uint256 dz) {\\n    address[] memory path    = new address[](2);\\n    path[0] = x;\\n    path[1] = y;\\n    uint256[] memory amounts1 = Uni(UNI_ADDRESS).swapExactTokensForTokens(dx,0,path,address(this),2654715875);\\n\\n    return amounts1[1];\\n  }\\n\\n  function trade_3 (address x, address y, address z, uint256 dx) public returns(uint256 dz) {\\n    address[] memory path    = new address[](2);\\n    path[0] = x;\\n    path[1] = y;\\n    uint256[] memory amounts1 = Uni(UNI_ADDRESS).swapExactTokensForTokens(dx,0,path,address(this),2654715875);\\n\\n    path[0] = y;\\n    path[1] = z;\\n    uint256[] memory amounts2 = Uni(UNI_ADDRESS).swapExactTokensForTokens(amounts1[1],0,path,address(this),2654715875);\\n\\n    path[0] = z;\\n    path[1] = x;\\n    uint256[] memory amounts3 = Uni(UNI_ADDRESS).swapExactTokensForTokens(amounts2[1],0,path,address(this),2654715875);\\n\\n    return amounts3[1];\\n  }\\n  \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"y\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"trade_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dz\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"y\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"trade_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dz\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "ContractName": "Tri",
    "CompilerVersion": "v0.8.4+commit.c7e474f2",
    "OptimizationUsed": "1",
    "Runs": "20",
    "ConstructorArguments": "",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": ""
}