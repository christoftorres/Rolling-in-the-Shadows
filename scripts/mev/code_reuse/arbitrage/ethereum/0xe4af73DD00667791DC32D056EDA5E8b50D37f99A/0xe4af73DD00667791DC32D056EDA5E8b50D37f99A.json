{
    "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface IRouter {\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract swap{\r\n    address private constant WETH =0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address private constant unirouter =0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant sushirouter =0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address private constant superMan=0x05E1dA69f6CC3e6fe5C3a113972DffD9798Cc76a;\r\n    using address_make_payable for address;\r\n\r\n\r\n    function getReserves(address pool0,address pool1) external view returns (uint112 a1,uint112 b1,uint112 a2, uint112 b2){\r\n        address token0=IPair(pool0).token0();\r\n        (uint112 reserve0, uint112 reserve1, ) = IPair(pool0).getReserves();\r\n        (a1,b1)=token0==WETH?(reserve0,reserve1):(reserve1,reserve0);\r\n        address token1=IPair(pool1).token0();\r\n        (uint112 reserve2, uint112 reserve3, ) = IPair(pool1).getReserves();\r\n        (a2,b2)=token1==WETH?(reserve2,reserve3):(reserve3,reserve2);\r\n    }\r\n    \r\n    function getprofit(address token, uint256 amount) external view returns (uint256 profit) {\r\n        address[] memory path = new address[](2);\r\n        path[0] =token;\r\n        path[1] =WETH;\r\n        uint[] memory swapamount=IRouter(sushirouter).getAmountsOut(amount,path);\r\n\r\n        address[] memory path1 = new address[](2);\r\n        path1[0] =WETH;\r\n        path1[1] =token;\r\n        uint[] memory backamount = IRouter(unirouter).getAmountsIn(amount,path1);\r\n        if (swapamount[1]<backamount[0]){\r\n            profit=0;\r\n        } else{\r\n            profit=swapamount[1]-backamount[0];\r\n        }\r\n    }   \r\n\r\n    function Swap(address _pair,address _tokenBorrow, uint256 _amount) external {\r\n        address token0 = IPair(_pair).token0();\r\n        address token1 = IPair(_pair).token1();\r\n        uint256 amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint256 amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        bytes memory data = abi.encode(_pair,_tokenBorrow, _amount);\r\n\r\n        IPair(_pair).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n\r\n    function uniswapV2Call(\r\n        address _sender,\r\n        uint256 _amount0,\r\n        uint256 _amount1,\r\n        bytes calldata _data\r\n    ) external {\r\n        require(_sender == address(this), \"!sender\");\r\n        (address pair,address tokenBorrow, uint amount) = abi.decode(_data, (address,address,uint));\r\n\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = tokenBorrow;\r\n        uint[] memory amounts = IRouter(unirouter).getAmountsIn(amount,path);\r\n\r\n        uint256 WETHBefore = IERC20(WETH).balanceOf(address(this));\r\n\r\n        address[] memory path1 = new address[](2);\r\n        path1[0] = tokenBorrow;\r\n        path1[1] = WETH;\r\n\r\n        if (IERC20(tokenBorrow).allowance(address(this),sushirouter)<1579208923731619542357098500868790853269984665640564039457584007912963993){\r\n            IERC20(tokenBorrow).approve(sushirouter,15792089237316195423570985008687907853269984665640564039457584007913129639936);\r\n        }\r\n\r\n        IRouter(sushirouter).swapExactTokensForETH(amount,1,path1,address(this),block.timestamp);\r\n        uint256 balance = address(this).balance;\r\n        IWETH(WETH).deposit{value:balance}();\r\n        IERC20(WETH).transfer(pair, amounts[0]);\r\n\r\n        uint256 WETHafter = IERC20(WETH).balanceOf(address(this));\r\n        require(WETHafter>= WETHBefore, \"WETH not enough\"); \r\n    }\r\n\r\n     \r\n    function moreETH() public payable {    \r\n    }\r\n\r\n    \r\n    function turnOutWETH(uint256 amount) public onlyOwner {\r\n        address payable addr = superMan.make_payable();\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function turnOutToken(address token, uint256 amount) public onlyOwner{\r\n        IERC20(token).transfer(superMan, amount);\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n    require(address(msg.sender) == superMan, \"No authority\");\r\n    _;\r\n    }\r\n    receive() external payable{}\r\n    }",
    "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBorrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool1\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"a1\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"b1\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"a2\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"b2\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getprofit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moreETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"turnOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"turnOutWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "swap",
    "CompilerVersion": "v0.6.12+commit.27d51765",
    "OptimizationUsed": "0",
    "Runs": "200",
    "ConstructorArguments": "",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "MIT",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://076c6d09968c4f0ea9c91319435c3e5a6d42e54093c0b1d0cd21ccd2118b9f95"
}