{
    "SourceCode": "// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// File contracts/Dependencies/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.11;\r\n\r\n/**\r\n * Based on OpenZeppelin's SafeMath:\r\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n *\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/B.Protocol/TokenAdapter.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ncontract TokenAdapter {\r\n    using SafeMath for uint256;\r\n\r\n    string constant public name = \"B.AMM\";\r\n    string constant public symbol = \"BAMM\";\r\n    uint public decimals = 18;\r\n\r\n    uint public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    // balanceOf for each account\r\n    mapping(address => uint256) public balanceOf;\r\n \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n \r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(tokens);\r\n        balanceOf[to] = balanceOf[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n \r\n    // Send `tokens` amount of tokens from address `from` to address `to`\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balanceOf[from] = balanceOf[from].sub(tokens);\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokens);\r\n        balanceOf[to] = balanceOf[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n \r\n    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowance[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint tokens) internal {\r\n        balanceOf[to] = balanceOf[to].add(tokens);\r\n        totalSupply = totalSupply.add(tokens);\r\n\r\n        emit Transfer(address(0), to, tokens);\r\n    }\r\n\r\n    function burn(address owner, uint tokens) internal {\r\n        balanceOf[owner] = balanceOf[owner].sub(tokens);\r\n        totalSupply = totalSupply.sub(tokens);\r\n\r\n        emit Transfer(owner, address(0), tokens);        \r\n    }\r\n}\r\n\r\n\r\n// File contracts/B.Protocol/PriceFormula.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ncontract PriceFormula {\r\n    using SafeMath for uint256;\r\n\r\n    function getSumFixedPoint(uint x, uint y, uint A) public pure returns(uint) {\r\n        if(x == 0 && y == 0) return 0;\r\n\r\n        uint sum = x.add(y);\r\n\r\n        for(uint i = 0 ; i < 255 ; i++) {\r\n            uint dP = sum;\r\n            dP = dP.mul(sum) / (x.mul(2)).add(1);\r\n            dP = dP.mul(sum) / (y.mul(2)).add(1);\r\n\r\n            uint prevSum = sum;\r\n\r\n            uint n = (A.mul(2).mul(x.add(y)).add(dP.mul(2))).mul(sum);\r\n            uint d = (A.mul(2).sub(1).mul(sum));\r\n            sum = n / d.add(dP.mul(3));\r\n\r\n            if(sum <= prevSum.add(1) && prevSum <= sum.add(1)) break;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    function getReturn(uint xQty, uint xBalance, uint yBalance, uint A) public pure returns(uint) {\r\n        uint sum = getSumFixedPoint(xBalance, yBalance, A);\r\n\r\n        uint c = sum.mul(sum) / (xQty.add(xBalance)).mul(2);\r\n        c = c.mul(sum) / A.mul(4);\r\n        uint b = (xQty.add(xBalance)).add(sum / A.mul(2));\r\n        uint yPrev = 0;\r\n        uint y = sum;\r\n\r\n        for(uint i = 0 ; i < 255 ; i++) {\r\n            yPrev = y;\r\n            uint n = (y.mul(y)).add(c);\r\n            uint d = y.mul(2).add(b).sub(sum); \r\n            y = n / d;\r\n\r\n            if(y <= yPrev.add(1) && yPrev <= y.add(1)) break;\r\n        }\r\n\r\n        return yBalance.sub(y).sub(1);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Interfaces/IPriceFeed.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ninterface IPriceFeed {\r\n\r\n    // --- Events ---\r\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\r\n   \r\n    // --- Function ---\r\n    function fetchPrice() external returns (uint);\r\n}\r\n\r\n\r\n// File contracts/Dependencies/IERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\n/**\r\n * Based on the OpenZeppelin IER20 interface:\r\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n *\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    \r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Dependencies/Ownable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\n/**\r\n * Based on OpenZeppelin's Ownable contract:\r\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n *\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n        \r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     *\r\n     * NOTE: This function is not safe, as it doesn\u2019t check owner is calling it.\r\n     * Make sure you check it before calling it.\r\n     */\r\n    function _renounceOwnership() internal {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Dependencies/AggregatorV3Interface.sol\r\n\r\n\r\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity 0.6.11;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n\r\n// File contracts/B.Protocol/BAMM.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ICToken {\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function balanceOf(address a) external view returns (uint);\r\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\r\n}\r\n\r\ncontract BAMM is TokenAdapter, PriceFormula, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    AggregatorV3Interface public immutable priceAggregator;\r\n    IERC20 public immutable LUSD;\r\n    uint public immutable lusdDecimals;\r\n    ICToken public immutable cETH;\r\n    ICToken public immutable cBorrow;\r\n\r\n    address payable public immutable feePool;\r\n    uint public constant MAX_FEE = 100; // 1%\r\n    uint public constant MAX_CALLER_FEE = 100; // 1%\r\n    uint public fee = 0; // fee in bps\r\n    uint public callerFee = 0; // fee in bps\r\n    uint public A = 20;\r\n    uint public constant MIN_A = 20;\r\n    uint public constant MAX_A = 200;    \r\n\r\n    uint public immutable maxDiscount; // max discount in bips\r\n\r\n    uint constant public PRECISION = 1e18;\r\n\r\n    event ParamsSet(uint A, uint fee, uint callerFee);\r\n    event UserDeposit(address indexed user, uint lusdAmount, uint numShares);\r\n    event UserWithdraw(address indexed user, uint lusdAmount, uint ethAmount, uint numShares);\r\n    event RebalanceSwap(address indexed user, uint lusdAmount, uint ethAmount, uint timestamp);\r\n\r\n    constructor(\r\n        address _priceAggregator,\r\n        address _LUSD,\r\n        address _cETH,\r\n        address _cBorrow,\r\n        uint _maxDiscount,\r\n        address payable _feePool)\r\n        public\r\n    {\r\n        priceAggregator = AggregatorV3Interface(_priceAggregator);\r\n        LUSD = IERC20(_LUSD);\r\n        lusdDecimals = IERC20(_LUSD).decimals();\r\n        cETH = ICToken(_cETH);\r\n        cBorrow = ICToken(_cBorrow);\r\n\r\n        feePool = _feePool;\r\n        maxDiscount = _maxDiscount;\r\n\r\n        require(IERC20(_LUSD).decimals() <= 18, \"unsupported decimals\");\r\n    }\r\n\r\n    function setParams(uint _A, uint _fee, uint _callerFee) external onlyOwner {\r\n        require(_fee <= MAX_FEE, \"setParams: fee is too big\");\r\n        require(_callerFee <= MAX_CALLER_FEE, \"setParams: caller fee is too big\");        \r\n        require(_A >= MIN_A, \"setParams: A too small\");\r\n        require(_A <= MAX_A, \"setParams: A too big\");\r\n\r\n        fee = _fee;\r\n        callerFee = _callerFee;\r\n        A = _A;\r\n\r\n        emit ParamsSet(_A, _fee, _callerFee);\r\n    }\r\n\r\n    function fetchPrice() public view returns(uint) {\r\n        uint chainlinkDecimals;\r\n        uint chainlinkLatestAnswer;\r\n        uint chainlinkTimestamp;\r\n\r\n        // First, try to get current decimal precision:\r\n        try priceAggregator.decimals() returns (uint8 decimals) {\r\n            // If call to Chainlink succeeds, record the current decimal precision\r\n            chainlinkDecimals = decimals;\r\n        } catch {\r\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\r\n            return 0;\r\n        }\r\n\r\n        // Secondly, try to get latest price data:\r\n        try priceAggregator.latestRoundData() returns\r\n        (\r\n            uint80 /* roundId */,\r\n            int256 answer,\r\n            uint256 /* startedAt */,\r\n            uint256 timestamp,\r\n            uint80 /* answeredInRound */\r\n        )\r\n        {\r\n            // If call to Chainlink succeeds, return the response and success = true\r\n            chainlinkLatestAnswer = uint(answer);\r\n            chainlinkTimestamp = timestamp;\r\n        } catch {\r\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\r\n            return 0;\r\n        }\r\n\r\n        if(chainlinkTimestamp + 1 hours < now) return 0; // price is down\r\n\r\n        uint chainlinkFactor = (10 ** (18 + chainlinkDecimals - lusdDecimals));\r\n        return chainlinkLatestAnswer.mul(PRECISION) / chainlinkFactor;\r\n    }\r\n\r\n    function deposit(uint lusdAmount) external {        \r\n        // update share\r\n        uint lusdValue = LUSD.balanceOf(address(this));\r\n        uint ethValue = address(this).balance;\r\n\r\n        uint price = fetchPrice();\r\n        require(ethValue == 0 || price > 0, \"deposit: chainlink is down\");\r\n\r\n        uint totalValue = lusdValue.add(ethValue.mul(price) / PRECISION);\r\n\r\n        // this is in theory not reachable. if it is, better halt deposits\r\n        // the condition is equivalent to: (totalValue = 0) ==> (totalSupply = 0)\r\n        require(totalValue > 0 || totalSupply == 0, \"deposit: system is rekt\");\r\n\r\n        uint newShare = PRECISION;\r\n        if(totalSupply > 0) newShare = totalSupply.mul(lusdAmount) / totalValue;\r\n\r\n        // deposit\r\n        require(LUSD.transferFrom(msg.sender, address(this), lusdAmount), \"deposit: transferFrom failed\");\r\n\r\n        // update LP token\r\n        mint(msg.sender, newShare);\r\n\r\n        emit UserDeposit(msg.sender, lusdAmount, newShare);        \r\n    }\r\n\r\n    function withdraw(uint numShares) external {\r\n        uint lusdValue = LUSD.balanceOf(address(this));\r\n        uint ethValue = address(this).balance;\r\n\r\n        uint lusdAmount = lusdValue.mul(numShares).div(totalSupply);\r\n        uint ethAmount = ethValue.mul(numShares).div(totalSupply);\r\n\r\n        // update LP token\r\n        burn(msg.sender, numShares);\r\n\r\n        // send lusd and eth\r\n        if(lusdAmount > 0) LUSD.transfer(msg.sender, lusdAmount);\r\n        if(ethAmount > 0) {\r\n            (bool success, ) = msg.sender.call{ value: ethAmount }(\"\"); // re-entry is fine here\r\n            require(success, \"withdraw: sending ETH failed\");\r\n        }\r\n\r\n        emit UserWithdraw(msg.sender, lusdAmount, ethAmount, numShares);            \r\n    }\r\n\r\n    function addBps(uint n, int bps) internal pure returns(uint) {\r\n        require(bps <= 10000, \"reduceBps: bps exceeds max\");\r\n        require(bps >= -10000, \"reduceBps: bps exceeds min\");\r\n\r\n        return n.mul(uint(10000 + bps)) / 10000;\r\n    }\r\n\r\n    function getSwapEthAmount(uint lusdQty) public view returns(uint ethAmount) {\r\n        uint lusdBalance = LUSD.balanceOf(address(this));\r\n        uint ethBalance  = address(this).balance;\r\n\r\n        uint eth2usdPrice = fetchPrice();\r\n        if(eth2usdPrice == 0) return 0; // chainlink is down\r\n\r\n        uint ethUsdValue = ethBalance.mul(eth2usdPrice) / PRECISION;\r\n        uint maxReturn = addBps(lusdQty.mul(PRECISION) / eth2usdPrice, int(maxDiscount));\r\n\r\n        uint xQty = lusdQty;\r\n        uint xBalance = lusdBalance;\r\n        uint yBalance = lusdBalance.add(ethUsdValue.mul(2));\r\n        \r\n        uint usdReturn = getReturn(xQty, xBalance, yBalance, A);\r\n        uint basicEthReturn = usdReturn.mul(PRECISION) / eth2usdPrice;\r\n\r\n        if(ethBalance < basicEthReturn) basicEthReturn = ethBalance; // cannot give more than balance \r\n        if(maxReturn < basicEthReturn) basicEthReturn = maxReturn;\r\n\r\n        ethAmount = basicEthReturn;\r\n    }\r\n\r\n    // get ETH in return to LUSD\r\n    function swap(uint lusdAmount, uint minEthReturn, address payable dest) public returns(uint) {\r\n        uint ethAmount = getSwapEthAmount(lusdAmount);\r\n\r\n        require(ethAmount >= minEthReturn, \"swap: low return\");\r\n\r\n        require(LUSD.transferFrom(msg.sender, address(this), lusdAmount), \"swap: transferFrom failed\");\r\n\r\n        uint feeAmount = addBps(lusdAmount, int(fee)).sub(lusdAmount);\r\n        if(feeAmount > 0) require(LUSD.transfer(feePool, feeAmount), \"swap: transfer failed\");\r\n\r\n        (bool success, ) = dest.call{ value: ethAmount }(\"\"); // re-entry is fine here\r\n        require(success, \"swap: sending ETH failed\");\r\n\r\n        emit RebalanceSwap(msg.sender, lusdAmount, ethAmount, now);\r\n\r\n        return ethAmount;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function canLiquidate(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint repayAmount\r\n    )\r\n        external\r\n        view\r\n        returns(bool)\r\n    {\r\n        if(cTokenBorrowed != address(cBorrow)) return false;\r\n        if(cTokenCollateral != address(cETH)) return false;\r\n\r\n        return repayAmount <= LUSD.balanceOf(address(this));\r\n    }\r\n\r\n    // callable by anyone\r\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint) {\r\n        require(collateral == address(cETH), \"liquidateBorrow: only cETH collateral is allowed\");\r\n\r\n        uint ethBalBefore = address(this).balance;\r\n        IERC20(LUSD).approve(address(cBorrow), amount);\r\n        require(cBorrow.liquidateBorrow(borrower, amount, collateral) == 0, \"liquidateBorrow: liquidation failed\");\r\n        IERC20(LUSD).approve(address(cBorrow), 0);\r\n        require(cETH.redeem(cETH.balanceOf(address(this))) == 0, \"liquidateBorrow: cETH redeem failed\");\r\n        uint ethBalAfter = address(this).balance;\r\n\r\n        uint deltaEth = ethBalAfter.sub(ethBalBefore);\r\n        uint feeAmount = addBps(deltaEth, int(callerFee)).sub(deltaEth);\r\n        if(feeAmount > 0 ) msg.sender.transfer(feeAmount);\r\n\r\n        // do sanity check on the price\r\n        uint price = fetchPrice();\r\n        require(deltaEth.mul(price) / PRECISION >= addBps(amount, int(maxDiscount)), \"liquidation discount is too low\");\r\n    }    \r\n}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cBorrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDiscount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callerFee\",\"type\":\"uint256\"}],\"name\":\"ParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lusdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RebalanceSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lusdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lusdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CALLER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBorrow\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cETH\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"canLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lusdAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"}],\"name\":\"getSumFixedPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lusdQty\",\"type\":\"uint256\"}],\"name\":\"getSwapEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lusdDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthReturn\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "BAMM",
    "CompilerVersion": "v0.6.11+commit.5ef660b1",
    "OptimizationUsed": "1",
    "Runs": "200",
    "ConstructorArguments": "000000000000000000000000639fe6ab55c921f74e7fac1ee960c0b6293ba612000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000008e15a22853a0a60a0fbb0d875055a8e66cff0235000000000000000000000000fcd8570ad81e6c77b8d252bebeba62ed980bd64d0000000000000000000000000000000000000000000000000000000000000190000000000000000000000000f2bb803010fa55ab60af1a4740d1a1d6c9c93a39",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "BSD-3-Clause",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://3405eae24d16f5fb2394cbcf083e6eabcae0822108b370e4ce988298c74a1fb8"
}