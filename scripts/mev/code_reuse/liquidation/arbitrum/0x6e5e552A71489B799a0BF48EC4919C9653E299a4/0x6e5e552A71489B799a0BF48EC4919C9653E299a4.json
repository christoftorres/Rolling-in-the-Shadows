{
    "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport './IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\"\r\n    },\r\n    \"contracts/Interfaces/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\ninterface IVault {\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILiquidator {\\n    struct LiquidationData {\\n        address user;\\n        ICERC20 borrowMarketAddress;\\n        uint256 loanAmount;\\n        ICERC20 collateralMarketAddress;\\n    }\\n\\n    struct MarketData {\\n        address underlyingAddress;\\n        address wethPair;\\n        address usdcPair;\\n    }\\n\\n    error UNAUTHORIZED(string);\\n    error INVALID_APPROVAL();\\n    error FAILED(string);\\n}\\n\\ninterface IERC20Extended is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\\ninterface ICERC20 is IERC20 {\\n    // CToken\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    // Cerc20\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ninterface SushiRouterInterface {\\n    function WETH() external returns (address);\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        fixed swapAmountETH,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface PriceOracleProxyETHInterface {\\n    function getUnderlyingPrice(address lToken) external returns (uint256);\\n\\n    struct AggregatorInfo {\\n        address source;\\n        uint8 base;\\n    }\\n\\n    function aggregators(address lToken) external returns (AggregatorInfo memory);\\n}\\n\\ninterface IPlutusDepositor {\\n    function redeem(uint256 amount) external;\\n\\n    function redeemAll() external;\\n}\\n\\ninterface IGLPRouter {\\n    function unstakeAndRedeemGlpETH(\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address payable _receiver\\n    ) external returns (uint256);\\n\\n    function unstakeAndRedeemGlp(address tokenOut, uint256 glpAmount, uint256 minOut, address receiver) external returns (uint256);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface ICETH is ICERC20 {\\n    function liquidateBorrow(\\n        address borrower,\\n        ICERC20 cTokenCollateral\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/UniswapV2Interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n// Ref: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LiquidatorConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./Interfaces/IVault.sol\\\";\\nimport {ILiquidator, ICERC20, SushiRouterInterface, PriceOracleProxyETHInterface, IERC20Extended, IGLPRouter, IPlutusDepositor, IWETH, ICETH} from \\\"./Interfaces/Interfaces.sol\\\";\\nimport \\\"./Interfaces/ISwapRouter.sol\\\";\\nimport \\\"./Interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract LiquidatorConstants is ILiquidator {\\n    IVault internal constant BALANCER_VAULT = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n    IERC20 internal constant USDC = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);\\n    IWETH internal constant WETH = IWETH(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\\n    IERC20 internal constant PLVGLP = IERC20(0x5326E71Ff593Ecc2CF7AcaE5Fe57582D6e74CFF1);\\n    IERC20 internal constant GLP = IERC20(0x1aDDD80E6039594eE970E5872D247bf0414C8903);\\n    SushiRouterInterface FRAX_ROUTER = SushiRouterInterface(0xCAAaB0A72f781B92bA63Af27477aA46aB8F653E7);\\n    ISwapRouter UNI_ROUTER = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    SushiRouterInterface SUSHI_ROUTER = SushiRouterInterface(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);\\n    IGLPRouter GLP_ROUTER = IGLPRouter(0xB95DB5B167D75e6d04227CfFFA61069348d271F5);\\n    IPlutusDepositor PLUTUS_DEPOSITOR = IPlutusDepositor(0x13F0D29b5B83654A200E4540066713d50547606E);\\n    //placeholder address throws error otherwise\\n    PriceOracleProxyETHInterface PRICE_ORACLE =\\n        PriceOracleProxyETHInterface(0xc873fEcbd354f5A56E00E710B90EF4201db2448d);\\n\\n    AggregatorV3Interface ETHUSD_AGGREGATOR = AggregatorV3Interface(0x639Fe6ab55C921f74e7fac1ee960C0B6293ba612);\\n\\n    mapping(address => MarketData) public marketData;\\n\\n    mapping(address => AggregatorV3Interface) public aggregators;\\n}\\n\"\r\n    },\r\n    \"contracts/LodestarLiquidator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Interfaces/IFlashLoanRecipient.sol\\\";\\nimport \\\"./Interfaces/UniswapV2Interface.sol\\\";\\nimport \\\"./Interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./LiquidatorConstants.sol\\\";\\nimport \\\"./Swap.sol\\\";\\n\\ncontract LodestarLiquidator is ILiquidator, LiquidatorConstants, Ownable, IFlashLoanRecipient {\\n    uint256 constant BASE = 1e18;\\n\\n    constructor(address[] memory lTokens, address[] memory underlyingTokens) {\\n        for (uint8 i = 0; i < lTokens.length; i++) {\\n            ICERC20(lTokens[i]).approve(lTokens[i], type(uint256).max);\\n        }\\n        for (uint8 i = 0; i < underlyingTokens.length; i++) {\\n            IERC20(underlyingTokens[i]).approve(address(lTokens[i]), type(uint256).max);\\n            IERC20(underlyingTokens[i]).approve(address(SUSHI_ROUTER), type(uint256).max);\\n            IERC20(underlyingTokens[i]).approve(address(UNI_ROUTER), type(uint256).max);\\n            IERC20(underlyingTokens[i]).approve(address(FRAX_ROUTER), type(uint256).max);\\n        }\\n        WETH.approve(address(SUSHI_ROUTER), type(uint256).max);\\n        WETH.approve(address(UNI_ROUTER), type(uint256).max);\\n        WETH.approve(address(FRAX_ROUTER), type(uint256).max);\\n        //WETH.approve(address(PLUTUS), type(uint256).max);\\n        WETH.approve(address(GLP), type(uint256).max);\\n        WETH.approve(address(this), type(uint256).max);\\n        GLP.approve(address(GLP_ROUTER), type(uint256).max);\\n        PLVGLP.approve(address(PLUTUS_DEPOSITOR), type(uint256).max);\\n    }\\n\\n    event Liquidation(address borrower, address borrowMarket, address collateralMarket, uint256 repayAmountUSD);\\n\\n    function swapThroughUniswap(\\n        address token0Address,\\n        address token1Address,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) internal returns (uint256) {\\n        uint24 poolFee = 3000;\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: abi.encodePacked(token0Address, poolFee, token1Address),\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: amountIn,\\n            amountOutMinimum: minAmountOut\\n        });\\n\\n        uint256 amountOut = UNI_ROUTER.exactInput(params);\\n        return amountOut;\\n    }\\n\\n    //NOTE:Only involves swapping tokens for tokens, any operations involving ETH will be wrap/unwrap calls to WETH contract\\n    function swapThroughSushiswap(address token0Address, address token1Address, uint256 amountIn, uint256 minAmountOut) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = token0Address;\\n        path[1] = token1Address;\\n        address to = address(this);\\n        uint256 deadline = block.timestamp;\\n        SUSHI_ROUTER.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, minAmountOut, path, to, deadline);\\n    }\\n\\n    function swapThroughFraxswap(address token0Address, address token1Address, uint256 amountIn, uint256 minAmountOut) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = token0Address;\\n        path[1] = token1Address;\\n        address to = address(this);\\n        uint256 deadline = block.timestamp;\\n        FRAX_ROUTER.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, minAmountOut, path, to, deadline);\\n    }\\n\\n    //unwraps a position in plvGLP to native ETH, must be wrapped into WETH prior to repaying flash loan\\n    function unwindPlutusPosition() public {\\n        PLUTUS_DEPOSITOR.redeemAll();\\n        uint256 glpAmount = GLP.balanceOf(address(this));\\n        //TODO: update with a method to calculate minimum out given 2.5% slippage constraints.\\n        uint256 minOut = 0;\\n        GLP_ROUTER.unstakeAndRedeemGlp(address(WETH), glpAmount, minOut, address(this));\\n    }\\n\\n    function plutusRedeem() public {\\n        PLUTUS_DEPOSITOR.redeemAll();\\n    }\\n\\n    function glpRedeem() public {\\n        uint256 balance = GLP.balanceOf(address(this));\\n        GLP_ROUTER.unstakeAndRedeemGlp(address(WETH), balance, 0, address(this));\\n    }\\n\\n    function wrapEther(uint256 amount) public returns (uint256) {\\n        address _owner = owner();\\n        require(msg.sender == _owner || msg.sender == address(this), \\\"UNAUTHORIZED\\\");\\n        (bool sent, ) = address(WETH).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        uint256 wethAmount = WETH.balanceOf(address(this));\\n        return wethAmount;\\n    }\\n\\n    function unwrapEther(uint256 amountIn) public returns (uint256) {\\n        address _owner = owner();\\n        require(msg.sender == _owner || msg.sender == address(this), \\\"UNAUTHORIZED\\\");\\n        WETH.withdraw(amountIn);\\n        uint256 etherAmount = address(this).balance;\\n        return etherAmount;\\n    }\\n\\n    function withdrawWETH() external onlyOwner {\\n        uint256 amount = WETH.balanceOf(address(this));\\n        WETH.transferFrom(address(this), msg.sender, amount);\\n    }\\n\\n    function withdrawETH() external payable onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool sent, ) = msg.sender.call{value: balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    receive() external payable {}\\n\\n    //TODO:Updates for migration to WETH flash loans, swaps to/from WETH for liquidations and repayment, check for special swap cases\\n\\n    function liquidateAccount(\\n        address borrowerAddress,\\n        ICERC20 borrowMarket,\\n        IERC20[] memory tokens,\\n        uint256[] memory loanAmounts,\\n        ICERC20 collateralMarket\\n    ) external {\\n        require(tx.origin == msg.sender, \\\"Cannot be called by Smart Contracts\\\");\\n        require(WETH.balanceOf(address(BALANCER_VAULT)) > loanAmounts[0], \\\"Not enough liquidity in Balancer Pool\\\");\\n\\n        LiquidationData memory liquidationData = LiquidationData({\\n            user: borrowerAddress,\\n            borrowMarketAddress: borrowMarket,\\n            loanAmount: loanAmounts[0],\\n            collateralMarketAddress: collateralMarket\\n        });\\n\\n        BALANCER_VAULT.flashLoan(IFlashLoanRecipient(address(this)), tokens, loanAmounts, abi.encode(liquidationData));\\n    }\\n\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory liquidationData\\n    ) external override {\\n        if (msg.sender != address(BALANCER_VAULT)) revert UNAUTHORIZED(\\\"!vault\\\");\\n\\n        // additional checks?\\n\\n        LiquidationData memory data = abi.decode(liquidationData, (LiquidationData));\\n        if (data.loanAmount != amounts[0] || WETH != tokens[0]) revert FAILED(\\\"!chk\\\");\\n\\n        // sanity check: flashloan has no fees\\n        if (feeAmounts[0] > 0) revert FAILED(\\\"fee>0\\\");\\n\\n        address borrower = data.user;\\n        ICERC20 borrowMarketAddress = data.borrowMarketAddress;\\n        ICERC20 collateralMarketAddress = data.collateralMarketAddress;\\n\\n        string memory borrowMarketSymbol = borrowMarketAddress.symbol();\\n        string memory collateralMarketSymbol = collateralMarketAddress.symbol();\\n\\n        IERC20 borrowUnderlyingAddress;\\n        IERC20 collateralUnderlyingAddress;\\n\\n        if(keccak256(bytes(borrowMarketSymbol)) != keccak256(\\\"lETH\\\")) {\\n            borrowUnderlyingAddress = IERC20(borrowMarketAddress.underlying());\\n        }\\n\\n        if(keccak256(bytes(collateralMarketSymbol)) != keccak256(\\\"lETH\\\")) {\\n            collateralUnderlyingAddress = IERC20(collateralMarketAddress.underlying());\\n        }\\n        //so now we have the WETH to liquidate in hand and now need to swap to the appropriate borrowed asset and execute the liquidation\\n        \\n\\n        if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lETH\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            unwrapEther(wethBalance);\\n            uint256 repayAmount = address(this).balance;\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            ICETH cEth = ICETH(address(borrowMarketAddress));\\n            cEth.liquidateBorrow{value: repayAmount}(borrower, collateralMarketAddress);\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lUSDC\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughUniswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lARB\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughUniswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lWBTC\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughUniswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lDAI\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughUniswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lUSDT\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughUniswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lMAGIC\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughSushiswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else if (keccak256(bytes(borrowMarketSymbol)) == keccak256(\\\"lDPX\\\")) {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughSushiswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        } else {\\n            uint256 wethBalance = WETH.balanceOf(address(this));\\n            swapThroughFraxswap(address(WETH), address(borrowUnderlyingAddress), wethBalance, 0);\\n            uint256 repayAmount = borrowUnderlyingAddress.balanceOf(address(this));\\n            require(repayAmount != 0, \\\"Swap Failed\\\");\\n            borrowMarketAddress.liquidateBorrow(borrower, repayAmount, address(collateralMarketAddress));\\n            emit Liquidation(borrower, address(borrowMarketAddress), address(collateralMarketAddress), repayAmount);\\n        }\\n\\n        uint256 lTokenBalance = collateralMarketAddress.balanceOf(address(this));\\n\\n        collateralMarketAddress.redeem(lTokenBalance);\\n\\n        if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lETH\\\")) {\\n            uint256 etherBalance = address(this).balance;\\n            wrapEther(etherBalance);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lUSDC\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughUniswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lARB\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughUniswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lWBTC\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughUniswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lDAI\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughUniswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lUSDT\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughUniswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lMAGIC\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughSushiswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lDPX\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughSushiswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else if (keccak256(bytes(collateralMarketSymbol)) == keccak256(\\\"lFRAX\\\")) {\\n            uint256 collateralBalance = collateralUnderlyingAddress.balanceOf(address(this));\\n            swapThroughFraxswap(address(collateralUnderlyingAddress), address(WETH), collateralBalance, 0);\\n        } else {\\n            unwindPlutusPosition();\\n        }\\n\\n        WETH.transferFrom(address(this), msg.sender, amounts[0]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Swap.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Interfaces/IFlashLoanRecipient.sol\\\";\\nimport \\\"./Interfaces/UniswapV2Interface.sol\\\";\\nimport \\\"./Interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./LiquidatorConstants.sol\\\";\\n\\ncontract Swap is ILiquidator, LiquidatorConstants, Ownable {\\n    constructor (address[] memory underlyingTokens) {\\n        for (uint8 i = 0; i < underlyingTokens.length; i++) {\\n            IERC20(underlyingTokens[i]).approve(address(SUSHI_ROUTER), type(uint256).max);\\n            IERC20(underlyingTokens[i]).approve(address(UNI_ROUTER), type(uint256).max);\\n            IERC20(underlyingTokens[i]).approve(address(FRAX_ROUTER), type(uint256).max);\\n        }\\n        WETH.approve(address(SUSHI_ROUTER), type(uint256).max);\\n        WETH.approve(address(UNI_ROUTER), type(uint256).max);\\n        WETH.approve(address(FRAX_ROUTER), type(uint256).max);\\n        WETH.approve(address(GLP), type(uint256).max);\\n        WETH.approve(address(this), type(uint256).max);\\n        GLP.approve(address(GLP_ROUTER), type(uint256).max);\\n        PLVGLP.approve(address(PLUTUS_DEPOSITOR), type(uint256).max);\\n    }\\n\\n    function swapThroughUniswap(\\n        address token0Address,\\n        address token1Address,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) public returns (uint256) {\\n        uint24 poolFee = 3000;\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: abi.encodePacked(token0Address, poolFee, token1Address),\\n            recipient: msg.sender,\\n            deadline: block.timestamp,\\n            amountIn: amountIn,\\n            amountOutMinimum: minAmountOut\\n        });\\n\\n        uint256 amountOut = UNI_ROUTER.exactInput(params);\\n        return amountOut;\\n    }\\n\\n    //NOTE:Only involves swapping tokens for tokens, any operations involving ETH will be wrap/unwrap calls to WETH contract\\n    function swapThroughSushiswap(address token0Address, address token1Address, uint256 amountIn, uint256 minAmountOut) public {\\n        address[] memory path = new address[](2);\\n        path[0] = token0Address;\\n        path[1] = token1Address;\\n        address to = address(this);\\n        uint256 deadline = block.timestamp;\\n        SUSHI_ROUTER.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, minAmountOut, path, to, deadline);\\n    }\\n\\n    function swapThroughFraxswap(address token0Address, address token1Address, uint256 amountIn, uint256 minAmountOut) public {\\n        address[] memory path = new address[](2);\\n        path[0] = token0Address;\\n        path[1] = token1Address;\\n        address to = address(this);\\n        uint256 deadline = block.timestamp;\\n        FRAX_ROUTER.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, minAmountOut, path, to, deadline);\\n    }\\n\\n    //unwraps a position in plvGLP to native ETH, must be wrapped into WETH prior to repaying flash loan\\n    function unwindPlutusPosition() public {\\n        PLUTUS_DEPOSITOR.redeemAll();\\n        uint256 glpAmount = GLP.balanceOf(address(this));\\n        //TODO: update with a method to calculate minimum out given 2.5% slippage constraints.\\n        uint256 minOut = 0;\\n        GLP_ROUTER.unstakeAndRedeemGlp(address(WETH), glpAmount, minOut, address(this));\\n    }\\n\\n    function plutusRedeem() public {\\n        PLUTUS_DEPOSITOR.redeemAll();\\n    }\\n\\n    function glpRedeem() public {\\n        uint256 balance = GLP.balanceOf(address(this));\\n        GLP_ROUTER.unstakeAndRedeemGlp(address(WETH), balance, 0, address(this));\\n    }\\n\\n    function wrapEther(uint256 amount) public returns (uint256) {\\n        (bool sent, bytes memory data) = address(WETH).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        uint256 wethAmount = WETH.balanceOf(address(this));\\n        return wethAmount;\\n    }\\n\\n    function unwrapEther(uint256 amountIn) public returns (uint256) {\\n        WETH.withdraw(amountIn);\\n        uint256 etherAmount = address(this).balance;\\n        return etherAmount;\\n    }\\n\\n    function withdrawWETH() external onlyOwner {\\n        uint256 amount = WETH.balanceOf(address(this));\\n        WETH.transferFrom(address(this), msg.sender, amount);\\n    }\\n\\n    function withdrawETH() external payable onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool sent, bytes memory data) = msg.sender.call{value: balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  }\r\n}}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_APPROVAL\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmountUSD\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"contract ICERC20\",\"name\":\"borrowMarket\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"loanAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ICERC20\",\"name\":\"collateralMarket\",\"type\":\"address\"}],\"name\":\"liquidateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcPair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plutusRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"liquidationData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwindPlutusPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"unwrapEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "LodestarLiquidator",
    "CompilerVersion": "v0.8.17+commit.8df45f5f",
    "OptimizationUsed": "1",
    "Runs": "200",
    "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000f81263eb84dfa118261cb9377f2c46ca04689e6e000000000000000000000000c9c043a7f80258d492121d2f34e829eb6517eb1700000000000000000000000001c7068ea92d3da2a1dad145c96c0f9398be93f2000000000000000000000000d006e90a4a1abfc560999ba2c3b0b70aa6b1b2f40000000000000000000000007b571111daff9428f7563582242ed29e5949970e0000000000000000000000002d5a5306e6cd7133ae576eb5edb2128d79d11a88000000000000000000000000d917d67f9dd5fa3a193f1e076c8c636867a3571b0000000000000000000000008c7b5f470251fed433e38215a959eeefc900d995000000000000000000000000e57390eb5f0dd76b545d7349845839ad6a4faee80000000000000000000000007a472988bd094a09f045120e78bb0cea44558b5200000000000000000000000000000000000000000000000000000000000000090000000000000000000000006c2c06790b3e3e3c38e12ee22f8183b37a13ee5500000000000000000000000017fc002b466eec40dae837fc4be5c67993ddbd6f000000000000000000000000539bde0d7dbd336b79148aa742883198bbf603420000000000000000000000005326e71ff593ecc2cf7acae5fe57582d6e74cff1000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90000000000000000000000002f2a2543b76a4166549f7aab2e75bef0aefc5b0f000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "BSD-3-Clause",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": ""
}