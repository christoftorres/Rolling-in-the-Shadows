{
    "SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IAavepool {\r\n  function getUserAccountData(address user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralETH,\r\n      uint256 totalDebtETH,\r\n      uint256 availableBorrowsETH,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\ncontract Execute {\r\n\r\n    address private immutable owner;\r\n    address private immutable executor;\r\n    address private constant LendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\r\n    IAavepool Aavepool = IAavepool(LendingPool);\r\n\r\n    // IERC20 private constant USDT = IERC20( 0xdAC17F958D2ee523a2206206994597C13D831ec7 );\r\n    // IERC20 private constant WBTC = IERC20( 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 );\r\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    // IERC20 private constant YFI = IERC20( 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e );\r\n    // IERC20 private constant ZRX = IERC20( 0xE41d2489571d322189246DaFA5ebDe1F4699F498 );\r\n    // IERC20 private constant UNI = IERC20( 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984 );\r\n    // IERC20 private constant AAVE = IERC20( 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9 );\r\n    // IERC20 private constant BAT = IERC20( 0x0D8775F648430679A709E98d2b0Cb6250d2887EF );\r\n    // IERC20 private constant BUSD = IERC20( 0x4Fabb145d64652a948d72533023f6E7A623C7C53 );\r\n    // IERC20 private constant DAI = IERC20( 0x6B175474E89094C44Da98b954EedeAC495271d0F );\r\n    // IERC20 private constant ENJ = IERC20( 0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c );\r\n    // IERC20 private constant KNC = IERC20( 0xdd974D5C2e2928deA5F71b9825b8b646686BD200 );\r\n    // IERC20 private constant LINK = IERC20( 0x514910771AF9Ca656af840dff83E8264EcF986CA );\r\n    // IERC20 private constant MANA = IERC20( 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942 );\r\n    // IERC20 private constant MKR = IERC20( 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2 );\r\n    // IERC20 private constant REN = IERC20( 0x408e41876cCCDC0F92210600ef50372656052a38 );\r\n    // IERC20 private constant SNX = IERC20( 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F );\r\n    // IERC20 private constant SUSD = IERC20( 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51 );\r\n    // IERC20 private constant TUSD = IERC20( 0x0000000000085d4780B73119b644AE5ecd22b376 );\r\n    // IERC20 private constant USDC = IERC20( 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 );\r\n    // IERC20 private constant CRV = IERC20( 0xD533a949740bb3306d119CC777fa900bA034cd52 );\r\n    // IERC20 private constant GUSD = IERC20( 0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd );\r\n    // IERC20 private constant BAL = IERC20( 0xba100000625a3754423978a60c9317c58a424e3D );\r\n    // IERC20 private constant XSUSHI = IERC20( 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272 );\r\n    // IERC20 private constant RENFIL = IERC20( 0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5 );\r\n    // IERC20 private constant RAI = IERC20( 0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919 );\r\n    // IERC20 private constant AMPL = IERC20( 0xD46bA6D942050d489DBd938a2C909A5d5039A161 );\r\n    // IERC20 private constant USDP = IERC20( 0x8E870D67F660D95d5be530380D0eC0bd388289E1 );\r\n    // IERC20 private constant DPI = IERC20( 0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b );\r\n    // IERC20 private constant FRAX = IERC20( 0x853d955aCEf822Db058eb8505911ED77F175b99e );\r\n    // IERC20 private constant FEI = IERC20( 0x956F47F50A910163D8BF957Cf5846D573E7f87CA );\r\n    // IERC20 private constant STETH = IERC20( 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84 );\r\n    // IERC20 private constant ENS = IERC20( 0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72 );\r\n    // IERC20 private constant CVX = IERC20( 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B );\r\n\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == executor);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _executor) payable {\r\n        owner = msg.sender;\r\n        executor = _executor;\r\n        if (msg.value > 0) {\r\n            WETH.deposit{value: msg.value}();\r\n        }\r\n        // USDT.approve(LendingPool, type(uint).max);\r\n        // WBTC.approve(LendingPool, type(uint).max);\r\n        // WETH.approve(LendingPool, type(uint).max);\r\n        // YFI.approve(LendingPool, type(uint).max);\r\n        // ZRX.approve(LendingPool, type(uint).max);\r\n        // UNI.approve(LendingPool, type(uint).max);\r\n        // AAVE.approve(LendingPool, type(uint).max);\r\n        // BAT.approve(LendingPool, type(uint).max);\r\n        // BUSD.approve(LendingPool, type(uint).max);\r\n        // DAI.approve(LendingPool, type(uint).max);\r\n        // ENJ.approve(LendingPool, type(uint).max);\r\n        // KNC.approve(LendingPool, type(uint).max);\r\n        // LINK.approve(LendingPool, type(uint).max);\r\n        // MANA.approve(LendingPool, type(uint).max);\r\n        // MKR.approve(LendingPool, type(uint).max);\r\n        // REN.approve(LendingPool, type(uint).max);\r\n        // SNX.approve(LendingPool, type(uint).max);\r\n        // SUSD.approve(LendingPool, type(uint).max);\r\n        // TUSD.approve(LendingPool, type(uint).max);\r\n        // USDC.approve(LendingPool, type(uint).max);\r\n        // CRV.approve(LendingPool, type(uint).max);\r\n        // GUSD.approve(LendingPool, type(uint).max);\r\n        // BAL.approve(LendingPool, type(uint).max);\r\n        // XSUSHI.approve(LendingPool, type(uint).max);\r\n        // RENFIL.approve(LendingPool, type(uint).max);\r\n        // RAI.approve(LendingPool, type(uint).max);\r\n        // AMPL.approve(LendingPool, type(uint).max);\r\n        // USDP.approve(LendingPool, type(uint).max);\r\n        // DPI.approve(LendingPool, type(uint).max);\r\n        // FRAX.approve(LendingPool, type(uint).max);\r\n        // FEI.approve(LendingPool, type(uint).max);\r\n        // STETH.approve(LendingPool, type(uint).max);\r\n        // ENS.approve(LendingPool, type(uint).max);\r\n        // CVX.approve(LendingPool, type(uint).max);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function execution(bytes memory txdata, uint256 _ethAmountToCoinbase, address _user) external onlyExecutor payable {\r\n        (,,,,,uint256 healthFactor) = Aavepool.getUserAccountData(_user);\r\n        if (healthFactor >= 1 ether){\r\n            return; \r\n        }\r\n        (bool _success, bytes memory _response) = LendingPool.call(txdata);\r\n        require(_success); _response;\r\n\r\n        uint256 _ethBalance = address(this).balance;\r\n        if (_ethBalance < _ethAmountToCoinbase) {\r\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\r\n        }\r\n        block.coinbase.transfer(_ethAmountToCoinbase);\r\n    }\r\n\r\n    function approve(address _tokenaddress) external onlyExecutor {\r\n        IERC20 tokenContract = IERC20(_tokenaddress);\r\n        tokenContract.approve(LendingPool, type(uint).max);\r\n    }\r\n\r\n    function withdrawToken(address _tokenContract, uint256 _amount) external onlyOwner payable{\r\n        IERC20 tokenContract = IERC20(_tokenContract);\r\n        tokenContract.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 _value) external onlyOwner payable{\r\n        payable(msg.sender).transfer(_value);\r\n    }\r\n\r\n    // function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {\r\n    //     require(_to != address(0));\r\n    //     (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\r\n    //     require(_success);\r\n    //     return _result;\r\n    // }\r\n}",
    "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txdata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmountToCoinbase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"execution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "ContractName": "Execute",
    "CompilerVersion": "v0.8.4+commit.c7e474f2",
    "OptimizationUsed": "0",
    "Runs": "200",
    "ConstructorArguments": "000000000000000000000000a3a5351390fe4ca74f03408738603dbb5172d11e",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "None",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": "ipfs://79272535fff12abee5cfce3d29183e974183fc52ee6353c6bc9140776068f267"
}