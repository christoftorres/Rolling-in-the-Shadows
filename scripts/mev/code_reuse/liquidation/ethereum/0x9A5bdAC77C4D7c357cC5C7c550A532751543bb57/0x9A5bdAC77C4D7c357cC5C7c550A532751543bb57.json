{
    "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DolaLiquidator.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface iZapper{\\n    function ZapOut(\\n        address fromVault,\\n        uint256 amountIn,\\n        address toToken,\\n        bool isAaveUnderlying,\\n        uint256 minToTokens,\\n        address swapTarget,\\n        bytes memory swapData,\\n        address affiliate,\\n        bool shouldSellEntireBalance\\n    ) external  returns (uint256 tokensReceived);\\n}\\n\\ninterface IERC20{\\n    function transfer(\\n        address dest,\\n        uint256 amountIn\\n    ) external ;\\n\\n    function approve(\\n        address dest,\\n        uint256 amountIn\\n    ) external ;\\n\\n    function balanceOf(\\n        address dest\\n    ) external returns (uint256);\\n\\n    function allowance(\\n        address dest,\\n        address ss\\n    ) external returns (uint256);\\n}\\n\\n\\ninterface iCtoken{\\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\\n\\n    function redeem(\\n        uint256 amountIn\\n    ) external  returns (uint);\\n}\\n\\ninterface iVault{\\n\\n    function withdraw(\\n    ) external ;\\n}\\n\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\\ninterface Curve{\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n\\n    function remove_liquidity_one_coin(uint256 token_amount, uint256 i, uint256 min_amount) external;\\n}\\n\\n \\n\\ncontract DolaLiquidator{\\n\\n    address public owner;\\n\\n    constructor() public{\\n        owner = msg.sender;\\n\\n        IERC20(DOLA).approve(ANDOLA, uint256(-1));\\n        IERC20(USDT).approve(DOLA3POOL, uint256(-1));\\n        IERC20(DAI).approve(DOLA3POOL, uint256(-1));\\n        IERC20(DOLA).approve(DOLA3POOL, uint256(-1));\\n        IERC20(DAI).approve(LENDER, uint256(-1));\\n        IERC20(threecrypto).approve(threecryptzap, uint256(-1));\\n        \\n\\n    }\\n    \\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address private constant DOLA = 0x865377367054516e17014CcdED1e7d814EDC9ce4;\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public constant LENDER = 0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853;\\n    address private constant ANDOLA = 0x7Fcb7DAC61eE35b3D4a51117A7c58D53f0a8a670;\\n    address private constant DOLA3POOL =0xAA5A67c256e27A5d80712c51971408db3370927D;\\n    address private constant yv3crv = 0xE537B5cc158EB71037D4125BDD7538421981E6AA;\\n    address private constant threecrypto = 0xc4AD29ba4B3c580e6D59105FFf484999997675Ff;\\n\\n    address private threecryptzap = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\\n    \\n    address public constant ZAPPER = 0xd6b88257e91e4E4D4E990B3A858c849EF2DFdE8c;\\n    address public ctokenCollat =0x1429a930ec3bcf5Aa32EF298ccc5aB09836EF587;\\n\\n    address public borrower = 0xf508c58ce37ce40a40997C715075172691F92e2D;\\n    bytes32 public constant CALLBACK_SUCCESS =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n\\n    function doLiq(\\n        uint256 amount\\n    ) public {\\n       \\n        address dai = DAI;\\n        uint256 requiredDai = amount;\\n        \\n        bytes memory data = abi.encode(amount);\\n        uint256 _fee = IERC3156FlashLender(LENDER).flashFee(dai, amount);\\n        // Check that fees have not been increased without us knowing\\n        require(_fee == 0);\\n        uint256 _allowance =\\n            IERC20(dai).allowance(address(this), address(LENDER));\\n        if (_allowance < requiredDai) {\\n            IERC20(dai).approve(address(LENDER), 0);\\n            IERC20(dai).approve(address(LENDER), type(uint256).max);\\n        }\\n        IERC3156FlashLender(LENDER).flashLoan(\\n            address(this),\\n            dai,\\n            requiredDai,\\n            data\\n        );\\n    }\\n\\n    function pullFunds(address erc20, uint256 amount) public{\\n        require(msg.sender  == owner);\\n        IERC20(erc20).transfer(owner, amount);\\n\\n    }\\n\\n     function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32) {\\n        require(msg.sender == LENDER, \\\"a\\\");\\n        require(initiator == address(this), \\\"s\\\");\\n        \\n\\n        //swap for dola\\n        Curve(DOLA3POOL).exchange_underlying(1, 0, IERC20(DAI).balanceOf(address(this)), 0);\\n\\n        \\n\\n        //liquidated\\n        uint256 balanceOfDola = IERC20(DOLA).balanceOf(address(this));\\n        iCtoken(ANDOLA).liquidateBorrow(borrower, balanceOfDola, ctokenCollat);\\n\\n\\n\\n        //redeem\\n        uint256 tokens = IERC20(ctokenCollat).balanceOf(address(this));\\n        iCtoken(ctokenCollat).redeem(tokens);\\n\\n        \\n\\n        //withdraw\\n        iVault(yv3crv).withdraw();\\n\\n        //remove liq\\n        Curve(threecryptzap).remove_liquidity_one_coin(IERC20(threecrypto).balanceOf(address(this)), 0, 0);\\n\\n        //swap to dai\\n        Curve(DOLA3POOL).exchange_underlying(3, 1, IERC20(USDT).balanceOf(address(this)), 0);\\n\\n        //se\\n\\n        return CALLBACK_SUCCESS;\\n    }\\n    \\n\\n\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"DolaLiquidator.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctokenCollat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "ContractName": "DolaLiquidator",
    "CompilerVersion": "v0.6.12+commit.27d51765",
    "OptimizationUsed": "1",
    "Runs": "200",
    "ConstructorArguments": "",
    "EVMVersion": "Default",
    "Library": "",
    "LicenseType": "None",
    "Proxy": "0",
    "Implementation": "",
    "SwarmSource": ""
}